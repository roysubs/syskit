#!/bin/bash
command -v mdcat &>/dev/null || "${0%/*}/mdcat-get.sh"; hash -r
command -v mdcat &>/dev/null || { echo "Error: mdcat required but not available." >&2; exit 1; }
WIDTH=$(if [ $(tput cols) -ge 105 ]; then echo 100; else echo $(( $(tput cols) - 5 )); fi)
mdcat --columns="$WIDTH" <(cat <<'EOF'

# Python Environment Management: venv, Version Managers, and OS Restrictions

Understanding how to manage Python packages and different Python versions is crucial. Recent changes, particularly the adoption of **PEP 668** and the **externally-managed-environment** concept, have changed how we should think about installing packages into the system's default Python.

This document explains the recommended approaches: virtual environments (`venv`), Python version managers (`asdf`/`pyenv`), and clarifies the limitations of `pip install --user` in modern OS-managed environments.

## 1. The `externally-managed-environment` and PEP 668

In many modern Linux distributions (like recent Debian, Ubuntu, etc.), the Python installation that comes with the operating system is marked as "externally managed". This means the OS package manager (`apt` in your case) is solely responsible for installing, updating, and removing packages for that specific Python installation.

* **Why?** This prevents users from using `pip install` (including `--user`) to modify this core Python environment. Modifying the system Python with `pip` can easily break system tools and applications that rely on specific versions of libraries installed by the OS package manager.

* **The Result:** If you try to use `pip install` (without being in a virtual environment) in an externally managed environment, you will likely get the `externally-managed-environment` error, even with `--user`.

**Therefore, for installing Python packages for your own projects or general use, you should generally NOT attempt to install directly into the system Python, even with `--user`, on these systems.** The OS actively prevents it for your protection.

## 2. Virtual Environments (`venv`): The Recommended Standard

Virtual environments are the **standard and recommended** way to manage dependencies for your Python projects. They create isolated Python environments that you have full control over, without affecting the system Python or other projects.

### Why use `venv`?

* **Project Isolation:** Each project gets its own dedicated set of installed packages and a Python interpreter. Dependencies for one project won't conflict with another.
* **No Root Required (after setup):** Once the `venv` is created (which might require `sudo` if you don't have permissions in the target directory, but usually you create it in your home or project directory), installing packages *within* the activated `venv` does not require `sudo`.
* **Reproducibility:** Easily share project requirements (`requirements.txt`) and recreate the exact dependency environment elsewhere.
* **Clean Slate:** Easily remove the environment by deleting its directory.
* **Bypasses OS Restrictions:** Installing packages within an activated `venv` is done in that environment's isolated `site-packages`, completely bypassing the `externally-managed-environment` restriction of the system Python.

### When to use `venv`?

* Any time you are working on a project with specific dependencies.
* When collaborating with others.
* This is now the **primary method** for installing Python packages for your own use on systems with `externally-managed-environment`.

### How to setup and use `venv`

1.  **Navigate to your project directory:** Open your terminal and go to your project's root folder.
    ```bash
    cd /path/to/your/project
    ```

2.  **Create the virtual environment:**
    ```bash
    python3 -m venv .venv
    ```
    (This creates a directory named `.venv` inside your project folder. `.venv` is a common convention and often ignored by Git).

3.  **Activate the environment:**
    * On Linux/macOS:
        ```bash
        source .venv/bin/activate
        ```
    * On Windows (Command Prompt):
        ```cmd
        .venv\Scripts\activate.bat
        ```
    * On Windows (PowerShell):
        ```powershell
        .venv\Scripts\Activate.ps1
        ```
    Your terminal prompt will show the name of the active environment (e.g., `(.venv) boss@hp2:...`).

4.  **Install packages:** While the `venv` is active, use `pip install`. Packages go into the `venv`'s isolated `site-packages`.
    ```bash
    pip install requests other_package
    ```

5.  **Test the installation:**
    ```bash
    python
    import requests
    print(requests.__version__)
    exit()
    ```

6.  **Deactivate the environment:** When done, simply type:
    ```bash
    deactivate
    ```

## 3. Python Version Managers (`asdf`, `pyenv`): Managing Python Itself

Tools like `asdf` and `pyenv` manage which *version* of the Python interpreter you are using (e.g., Python 3.8, 3.10, 3.11). They are useful if you need to work with multiple projects that require different Python versions.

### Why use `asdf` or `pyenv`?

* **Install Multiple Python Versions:** Easily install and switch between various Python releases.
* **Isolate Python Installations:** Install Python versions independently of the system, further reducing reliance on the OS-managed Python.

### How they fit together

Version managers handle the **Python interpreter version**. You typically use a version manager to select the desired Python version for a project, and then create a **virtual environment (`venv`)** *using* that specific Python version to manage the project's **package dependencies**.

## 4. `pip install --user`: The Deprecated Approach for System Python

On systems with `externally-managed-environment`, using `pip install --user` into the system Python is **no longer the recommended practice** for installing packages for your own use. It is blocked by default to protect the system.

### When might you still encounter or use `--user`?

* **Older Systems:** On older Linux distributions that do not implement the `externally-managed-environment` restriction.
* **Installing Specific CLI Tools (with caution):** Sometimes, users might *intentionally* override the system protection (`--break-system-packages`) to install a command-line tool globally accessible to their user. **This is risky and generally discouraged** as it can still lead to conflicts. Using `pipx` (see below) is a safer way to install Python-based CLI applications.
* **Within a Virtual Environment:** If you are *inside* an activated virtual environment, `pip install --user` will still install into the user's local site-packages *within that virtual environment*, which is usually not the intended behavior when inside a venv. Just using `pip install` is sufficient within an activated venv.

## 5. `pipx`: For Installing Python Applications

`pipx` is a tool specifically designed to install and run Python applications in isolated environments. It's ideal for command-line tools written in Python (like `httpie`, `yt-dlp`, `black`) that you want to use directly from your terminal without creating a separate `venv` for each tool.

### Why use `pipx`?

* Installs applications in isolated environments automatically.
* Makes the application's executable available in your PATH.
* Avoids cluttering your virtual environments or the system Python with application dependencies.

### How to use `pipx`

1.  **Install pipx (might require `sudo` depending on system setup, or install with `pip install --user` on a non-externally managed Python or in a user-level venv if available):**
    ```bash
    python3 -m pip install --user pipx
    python3 -m pipx ensurepath
    ```
    (You might need to reopen your terminal or `source` your shell config after `ensurepath`).

2.  **Install an application:**
    ```bash
    pipx install httpie
    ```

3.  **Run the application:**
    ```bash
    http example.com
    ```

## 6. Summary: Choosing the Right Tool

* **For project-specific dependencies:** Use **Virtual Environments (`venv`)**. This is the standard, safest, and recommended method on all systems, especially those with `externally-managed-environment`.
* **For managing different Python interpreter versions:** Use a **Version Manager** like `asdf` or `pyenv`.
* **For installing Python command-line applications:** Use **`pipx`**.
* **For installing packages into the system Python:** **Avoid this** on systems with `externally-managed-environment`. If absolutely necessary on older systems, `pip install --user` installs to your home directory, but lacks dependency isolation. Using `--break-system-packages` is risky.

Always prefer using isolated environments (`venv` or `pipx`) over installing into the system Python.

EOF
) | less -R
