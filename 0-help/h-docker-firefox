#!/bin/bash
command -v mdcat &>/dev/null || "${0%/*}/mdcat-get.sh"; hash -r
command -v mdcat &>/dev/null || { echo "Error: mdcat required but not available." >&2; exit 1; }
WIDTH=$(if [ $(tput cols) -ge 105 ]; then echo 100; else echo $(( $(tput cols) - 5 )); fi)
mdcat --columns="$WIDTH" <(cat <<'EOF'

# Guide: Running Remote Dockerized Firefox with X11 Forwarding to Windows Desktop

This guide explains how to run Firefox (or another browser) inside a Docker container on a remote Linux system (`hp2`) and display its GUI on your Windows desktop as if it were a native application, using X11 forwarding.

## Core Components

* **X Server on Windows:** Windows doesn't have a native X server. You'll need to install one.
    * ***VcXsrv***: A popular, free, and open-source option. ([Download](https://sourceforge.net/projects/vcxsrv/))
    * ***X410***: A paid option from the Microsoft Store, known for good integration.
    * ***MobaXterm***: A comprehensive terminal tool that includes an X server, SSH client, and more. If you use it for SSH, its X11 forwarding is often simpler.

* **SSH Client on Windows with X11 Forwarding Enabled:** This will securely connect to your Linux machine and tunnel the X11 display traffic.
    * ***PuTTY:*** A very common free SSH client for Windows.
    * ***Windows OpenSSH Client:*** Included in Windows 10/11 (PowerShell or Command Prompt).
    * ***MobaXterm:*** Has a built-in SSH client with straightforward X11 forwarding.

* **Docker on Remote Linux System (`hp2`):** Firefox will run inside a Docker container on `hp2`.
    * You'll need a Docker image for Firefox, e.g., `jlesage/firefox` or `linuxserver/firefox`.

* **Configuration on `hp2`:**
    * The SSH server (`sshd_config`, usually at `/etc/ssh/sshd_config`) on `hp2` must have `X11Forwarding yes` enabled (default is usually yes).
    * The `xauth` package should be installed on `hp2` (e.g., `sudo apt install x11-apps xauth` or `sudo yum install xorg-x11-apps xorg-x11-xauth`).

## Step-by-Step Guide

### Phase 1: Setup X Server on Windows and Test Basic X11 Forwarding

1.  **Install an X Server on Windows:**
    * **If using VcXsrv:**
        * Download and install it.
        * When launching VcXsrv (XLaunch):
            * Choose "Multiple windows".
            * Set "Display number" to `0` (or another if `0` is in use).
            * Choose "Start no client".
            * **Important:** For initial testing, tick "Disable access control". For better security later, configure access control or rely on SSH's Xauthority handling.
            * Save the configuration for easy relaunch.
    * **Guides:**
        * General VcXsrv usage: [How to use VcXsrv Windows X Server](https://www.youtube.com/watch?v=X-J0z2yE1sU) (Video, example link)
        * More details: [Using VcXsrv to Run GUI Linux Apps on Windows](https://www.howtogeek.com/747036/how-to-run-gui-linux-apps-on-windows-10-with-vcxsrv/)

2.  **Configure SSH Client for X11 Forwarding:**
    * **If using PuTTY:**
        * In PuTTY Configuration:
            * Go to **Connection -> SSH -> X11**.
            * Check "Enable X11 forwarding".
            * For "X display location", leave blank or set to `localhost:0` (matching VcXsrv).
        * Go to **Session**, enter the IP/hostname of `hp2`, save your session.
    * **If using Windows OpenSSH Client (PowerShell/CMD):**
        * Use the `-X` (less secure) or `-Y` (trusted) option: `ssh -Y your_user@hp2_ip_address`
    * **Guides:**
        * PuTTY X11 Forwarding: [Official PuTTY Docs](https://www.chiark.greenend.org.uk/~sgtatham/putty/wishlist/x11-forwarding.html)

3.  **Test Basic X11 Forwarding:**
    * Start your X Server (e.g., VcXsrv) on Windows.
    * Connect to `hp2` via your configured SSH client (with X11 forwarding enabled).
    * Once logged into `hp2`, install `x11-apps` if not present (`sudo apt install x11-apps` or `sudo yum install xorg-x11-apps`).
    * Run a simple X11 application:
        ```bash
        xeyes
        ```
    * The `xeyes` window should appear on your Windows desktop. If not, troubleshoot (Windows Firewall, SSH server config on `hp2`, X server settings on Windows).

### Phase 2: Run Containerized Firefox with X11 Forwarding

1.  **Ensure Firefox Docker Image is Available on `hp2`:**
    * On `hp2`, pull a Firefox image:
        ```bash
        docker pull jlesage/firefox
        # or
        # docker pull linuxserver/firefox
        ```

2.  **Run the Docker Container with X11 Forwarding:**
    * When connected to `hp2` via SSH (with X11 forwarding working), SSHD on `hp2` sets the `DISPLAY` environment variable for your session (e.g., `localhost:10.0`). The Docker container needs to use this.
    * **Command Example (using `jlesage/firefox`):**
        The `jlesage/firefox` image is often configured to handle X11 well.
        ```bash
        # On hp2, within your SSH session where 'xeyes' worked:
        # The DISPLAY variable is usually set by your SSH X11 forwarding session.
        # The XAUTHORITY variable is also typically set by sshd for X11 forwarding.

        docker run -d --rm \
               -e DISPLAY=$DISPLAY \
               -v /tmp/.X11-unix:/tmp/.X11-unix:ro \
               -v $XAUTHORITY:/tmp/.Xauthority_docker:ro \ # Mount the session's Xauthority
               -e XAUTHORITY=/tmp/.Xauthority_docker \    # Tell the container to use it
               --name remote_firefox \
               jlesage/firefox
        ```
        * **Note:** The exact path for `XAUTHORITY` inside the container and how the container's entrypoint uses it can vary. Some images might expect it at `~/.Xauthority` relative to the container's user. `jlesage` images are generally well-behaved.
        * If `$XAUTHORITY` is not set, or you encounter issues, a more explicit method for Xauthority is shown in the script in Phase 3.

    * **Guides on Docker GUI/X11 Forwarding:**
        * [Running GUI applications in Docker containers (Jess Frazelle)](https://blog.jessfraz.com/post/docker-containers-on-the-desktop/)
        * [Stack Overflow: How to run GUI applications in a docker container?](https://stackoverflow.com/questions/16296753/how-to-run-gui-applications-in-a-docker-container)

### Phase 3: Creating the Windows Desktop Shortcut

Using a helper script on `hp2` is the most robust way.

1.  **Create a Helper Script on `hp2` (e.g., `/home/your_user/launch_remote_firefox.sh`):**
    ```bash
    #!/bin/bash
    # launch_remote_firefox.sh

    # Ensure DISPLAY is set (it should be by SSH X11 forwarding)
    if [ -z "$DISPLAY" ]; then
        echo "Error: DISPLAY environment variable is not set by SSH." >&2
        exit 1
    fi

    # Ensure XAUTHORITY is set by SSH, or handle xauth manually if needed
    if [ -z "$XAUTHORITY" ]; then
        echo "Warning: XAUTHORITY environment variable is not set by SSH. X11 forwarding might fail." >&2
        # Fallback or error, depending on strictness. For simplicity, we'll assume SSH sets it.
    fi

    # Prepare a distinct Xauthority file for the container to avoid potential conflicts if XAUTHORITY points to a larger file.
    # This copies the relevant magic cookie for the current $DISPLAY.
    CONTAINER_XAUTH_FILE=$(mktemp /tmp/docker_container_xauth.XXXXXX)
    if [ -n "$XAUTHORITY" ] && [ -f "$XAUTHORITY" ]; then
        xauth -f "$XAUTHORITY" nlist "$DISPLAY" | xauth -f "$CONTAINER_XAUTH_FILE" nmerge -
    else
        # If XAUTHORITY is not available, this is less secure and relies on xhost or disabled access control
        # Or, one could try to generate a cookie if xauth tools allow it without an existing server-side setup.
        # This part would need more complex error handling or setup.
        echo "Warning: XAUTHORITY not found, X11 connection may be unauthenticated or fail." >&2
    fi
    chmod 600 "$CONTAINER_XAUTH_FILE" # Restrict permissions

    # Check if an instance is already running (optional)
    # if docker ps --format '{{.Names}}' | grep -q '^remote_firefox$'; then
    #    echo "Firefox is already running."
    #    exit 0
    # fi

    docker run --rm \
           -e DISPLAY="$DISPLAY" \
           -v /tmp/.X11-unix:/tmp/.X11-unix:ro \
           -v "$CONTAINER_XAUTH_FILE":"/tmp/.container_xauth":ro \
           -e XAUTHORITY="/tmp/.container_xauth" \
           --name remote_firefox \
           jlesage/firefox
           # Add other options as needed:
           # For persistence: -v /path/on/hp2/to/firefox_profile:/config
           # For sound (requires PulseAudio setup, more complex): -e PULSE_SERVER=... -v /run/user/$(id -u)/pulse:/run/user/$(id -u)/pulse ...

    # Clean up the temporary Xauthority file
    rm "$CONTAINER_XAUTH_FILE"
    ```
    Make it executable on `hp2`: `chmod +x /home/your_user/launch_remote_firefox.sh`

2.  **Windows Shortcut Target:**
    * **For seamless execution (no password prompt):** Configure SSH key-based authentication from your Windows machine to `hp2`.
        * [Set Up SSH Keys on Windows 10/11 (HowToGeek)](https://www.howtogeek.com/762859/how-to-set-up-ssh-keys-on-windows-10-or-11/)
        * [PuTTY SSH Key Authentication (SSH.com)](https://www.ssh.com/academy/ssh/putty/public-key-authentication)

    * Create a new shortcut on your Windows desktop. Set the "Target" to:
        * **Using `plink.exe` (from PuTTY suite, ensure it's in PATH or use full path):**
            ```
            C:\Path\To\PuTTY\plink.exe -Y your_user@hp2_ip_address /home/your_user/launch_remote_firefox.sh
            ```
            (Or use a saved PuTTY session: `plink.exe -load "YourSavedHp2Session" /home/your_user/launch_remote_firefox.sh`)
        * **Using Windows OpenSSH (`ssh.exe`):**
            ```
            C:\Windows\System32\OpenSSH\ssh.exe -Y your_user@hp2_ip_address /home/your_user/launch_remote_firefox.sh
            ```
            *(Use `-Y` for trusted X11 forwarding, which is generally recommended over `-X` if your remote server and apps are trusted).*

## Important Considerations & Troubleshooting

* **Firewall:** Your Windows Firewall (or third-party) must allow your X Server (e.g., VcXsrv) to accept incoming connections (at least from `localhost` if PuTTY/SSH is creating the tunnel locally, or from `hp2` if configured differently).
* **`DISPLAY` Variable:** Crucial. SSH X11 forwarding should handle it. The script on `hp2` relies on this.
* **Xauthority:** Correctly handling `.Xauthority` (the "magic cookie" for X11) is vital for secure, authenticated X11 connections. The helper script attempts a robust method.
* **Container User Permissions:** The user inside Docker needs to read the Xauthority file and access the X11 socket. `jlesage` images often handle this. For others, you might need to manage UIDs/GIDs.
* **NVIDIA Docker:** If `hp2` has an NVIDIA GPU and you want hardware acceleration (less critical for a browser but possible), `nvidia-docker2` (NVIDIA Container Toolkit) would be needed on `hp2`, and `--gpus all` added to `docker run`.
* **Persistence:** `docker run --rm` starts a fresh Firefox. For bookmarks, history, etc., mount a volume for its configuration directory (e.g., for `jlesage/firefox`, map a host directory to `/config` inside the container: `-v /path/on/hp2/firefox_config:/config`).
* **Sound:** Getting audio from the containerized browser is a separate, more complex challenge, often involving PulseAudio forwarding over SSH or a dedicated PulseAudio Docker setup. The above guide focuses on video.

This setup involves multiple components. Test each stage incrementally: X server, basic SSH X11 forwarding (e.g., with `xeyes`), then the Docker command directly in an SSH session, followed by the script, and finally the Windows shortcut.

EOF
) | less -R
