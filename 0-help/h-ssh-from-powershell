#!/bin/bash
command -v mdcat &>/dev/null || "${0%/*}/mdcat-get.sh"; hash -r
command -v mdcat &>/dev/null || { echo "Error: mdcat required but not available." >&2; exit 1; }
WIDTH=$(if [ $(tput cols) -ge 105 ]; then echo 100; else echo $(( $(tput cols) - 5 )); fi)
mdcat --columns="$WIDTH" <(cat <<'EOF'

# SSH on PowerShell - Connecting to Debian and Working with SSH

Connecting to a Debian server from PowerShell using SSH, working with SSH features (such as key management, X11 forwarding, and port forwarding), and includes practical tips for interacting with the console using the mouse, clipboard, and Vim. It also covers advanced features like multiplexing and troubleshooting SSH connections.

## 1. **Setting Up SSH on PowerShell to Connect to Debian Server**

### Install OpenSSH Client on Windows (PowerShell)
- OpenSSH client comes pre-installed on Windows 10 and 11.
  If it's not installed, use the following from Administrator PowerShell session:
    ```
    Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
    ```
  - Once installed, verify the SSH client is available:
    ```
    ssh -V
    ```

### Connecting to Your Debian Server via SSH
- Use the following command in PowerShell to connect to your Debian server:
ssh user@hostname_or_ip

Replace `user` with your username on the Debian server and `hostname_or_ip` with the server’s hostname or IP address.

- If you want to specify a particular private key for authentication, use the `-i` flag:
ssh -i /path/to/private_key user@hostname_or_ip

### Using SSH Port Forwarding
- To forward ports from your local machine to your Debian server, use the `-L` (local) or `-R` (remote) options:
- Local forwarding (forwarding local port to a remote port):
  ```
  ssh -L 8080:localhost:80 user@hostname_or_ip
  ```
- Remote forwarding (forwarding remote port to a local port):
  ```
  ssh -R 8080:localhost:80 user@hostname_or_ip
  ```

### Enable X11 Forwarding (for GUI Applications)
- If you need to run GUI applications from your Debian server on Windows, use X11 forwarding:
- Enable X11 forwarding with the `-X` or `-Y` option:
  ```
  ssh -X user@hostname_or_ip
  ```
  - `-X` enables X11 forwarding (less trusted, but typically sufficient).
  - `-Y` enables trusted X11 forwarding (more permissive, use if `-X` doesn’t work).
- You'll need an X server installed on Windows, such as **VcXsrv** or **Xming**.
- After connecting, you can run GUI applications from the Debian server, and they will display on your Windows machine.

## 2. **Working with SSH in PowerShell - Tips and Tricks**

### Using `clip` to Copy Output to Windows Clipboard
- PowerShell has a built-in utility called `clip` that can copy any output directly to the Windows clipboard:
- Example of copying SSH output to clipboard:
  ```
  ssh user@hostname_or_ip "cat /etc/hostname" | clip
  ```
- This will send the contents of `/etc/hostname` from the remote server directly to your clipboard.

### Copying Text from SSH Console to Clipboard (Using `clip`)
- If you're working with SSH in PowerShell and want to copy text from the remote console into your clipboard, simply:
- Select the text in the PowerShell window (right-click to copy).
- Alternatively, in newer versions of PowerShell, you can use the `Ctrl + Shift + C` keyboard shortcut to copy text from the console.

### Pasting Text into SSH Console
- To paste into the SSH session from the clipboard:
- Right-click in the PowerShell window to paste.
- Alternatively, use `Ctrl + Shift + V` to paste in some environments.

### Using `clipx` (or `win32-clipboard` in Python) for Clipboard Management
- If you need advanced clipboard management, you can use **ClipX** (a lightweight clipboard manager for Windows):
- Download and install ClipX from [here](http://bluemars.org/clipx/).
- You can use it to manage multiple clipboard items and paste from history.
- Alternatively, for programmatic clipboard management, you can use `win32-clipboard` in Python scripts:
```python
import win32clipboard
win32clipboard.SetClipboardText("Hello from SSH!")
3. Working with Vim via SSH - Using Mouse and Clipboard
Using the Mouse in Vim over SSH
To enable mouse support in Vim over SSH, you must enable the mouse option in your ~/.vimrc file:
Add the following line to your .vimrc: `set mouse=a`
This will allow you to use the mouse for scrolling, selecting, and copying/pasting text in Vim.
Cutting and Pasting Text in Vim using the Mouse (with set mouse=a)
After enabling the mouse, you can:
Select text in Vim with the mouse and copy it to the clipboard (works with a terminal that supports mouse input).
Use Vim’s visual mode for cutting and pasting:
Press v to enter visual mode.
Use the arrow keys or mouse to select the text.
Press d to cut or y to yank (copy).
Move to the target position and press p to paste the text.
Using System Clipboard with Vim (in an SSH Session)
To use the system clipboard in Vim, you'll need to make sure Vim is compiled with clipboard support (+clipboard):
Check if your Vim has clipboard support:
vim --version | grep +clipboard
If Vim does not have clipboard support, you can either recompile Vim with +clipboard or use neovim, which has clipboard support out of the box.
If clipboard support is enabled, you can copy from and paste to the system clipboard:
Yank text to the clipboard:
"+y
Paste from the clipboard:
"+p
Using tmux or screen to Manage Multiple SSH Sessions
If you're managing multiple SSH sessions, using tmux or screen is extremely helpful:
Install tmux on Debian:
sudo apt install tmux
Start a new tmux session:
tmux
You can create multiple panes, split windows, and manage several SSH sessions from a single terminal.
To use mouse support in tmux, add the following to your .tmux.conf:
set -g mouse on
After that, you can use the mouse to select panes, resize them, and scroll.
4. Advanced SSH Features and Useful Flags
Using SSH Multiplexing for Faster Connections
SSH multiplexing allows you to reuse an existing SSH connection, speeding up subsequent connections to the same server:
Add the following to your ~/.ssh/config:
Host *
  ControlMaster auto
  ControlPath ~/.ssh/cm_socket/%r@%h:%p
  ControlPersist 600
This will automatically multiplex SSH connections, reusing the first connection and reducing connection time for subsequent sessions.
SSH Key Management with ssh-agent
Use ssh-agent to manage SSH keys securely and automatically:
Start the ssh-agent in PowerShell:
eval $(ssh-agent -s)
Add your SSH key to the agent:
ssh-add /path/to/private_key
5. Troubleshooting SSH on PowerShell
Debugging SSH Connection Issues
Use the -v (verbose) flag to get more detailed output during the SSH connection:
ssh -v user@hostname_or_ip
Use multiple -v flags for even more verbosity (-vv or -vvv):
ssh -vvv user@hostname_or_ip
Checking SSH Server Logs on Debian
On the Debian server, check the SSH logs for issues:
sudo tail -f /var/log/auth.log

EOF
) | less -R
