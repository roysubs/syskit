# Docker Compose file for Immich
# Generated by script on Fri May 30 17:24:41 CEST 2025
# Navigate to this directory ('immich-stack-20250530-1724') and run:
# docker-compose up -d
# To stop: docker-compose down
# To update: docker-compose pull && docker-compose up -d

version: '3.8'

services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    command: [ "start.sh", "immich" ]
    volumes:
      - /home/boss/immich-photos:/usr/src/app/upload # Actual photos/videos path
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      - "2283:3001" # Host port : Container port for Immich server
    depends_on:
      - immich-redis
      - immich-database
      - immich-typesense
    restart: always
    networks:
      - immich_internal
      - proxy

  immich-microservices:
    container_name: immich_microservices
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    # extends: # Omitted for script simplicity, using command directly
    #  file: docker-compose.yml # Assuming this file is this one
    #  service: immich-server
    command: [ "start.sh", "microservices" ]
    volumes:
      - /home/boss/immich-photos:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    depends_on:
      - immich-redis
      - immich-database
      - immich-typesense
    restart: always
    networks:
      - immich_internal
      - proxy

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    volumes:
      - /home/boss/immich-cache:/cache # Model cache path
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports: # Only expose if you have a specific need, usually not required
      # - "3003:3003"
    restart: always
    networks:
      - immich_internal
      - proxy

  immich-web:
    container_name: immich_web
    image: ghcr.io/immich-app/immich-web:${IMMICH_VERSION:-release}
    env_file:
      - .env
    ports: # This service is usually proxied by immich-server or a reverse proxy
      # If not using a reverse proxy directly in front of immich-server,
      # you might map this if you were accessing it directly, but it's uncommon.
      # The main access point is immich-server's port 2283.
      # Example: - "8080:8080" # If you wanted to expose it separately for some reason.
    restart: always
    networks:
      - immich_internal
      - proxy

  immich-database:
    container_name: immich_postgres
    image: tensorchord/pgvecto-rs:pg16-v0.2.0 # Or use timescale/timescaledb-ha:pg16-ts2.13-latest for TimescaleDB
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE_NAME}
    volumes:
      - /home/boss/immich-dbdata:/var/lib/postgresql/data # Database data persistence
      - /etc/localtime:/etc/localtime:ro

    restart: always
    networks:
      - immich_internal
      - proxy

  immich-redis:
    container_name: immich_redis
    image: redis:6.2-alpine@sha256:84882e231368784030570d5ac099015308c25366910948504065975721f58781
    # environment: # If you want to set a password for Redis
    #   - REDIS_PASSWORD=yoursecurepassword
    # command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    restart: always
    networks:
      - immich_internal
      - proxy

  immich-typesense:
    container_name: immich_typesense
    image: typesense/typesense:0.25.2@sha256:963f4353851f47c4c17802082a4029576035605a6c0957127d4f87f8256538a8
    environment:
      TYPESENSE_API_KEY: "${TYPESENSE_API_KEY}"
      TYPESENSE_DATA_DIR: /data
      # GLOG_minloglevel: 0 # Uncomment for more verbose logging if needed
    volumes:
      - ./tsdata:/data # Typesense data persistence
      - /etc/localtime:/etc/localtime:ro
    restart: always
    networks:
      - immich_internal
      - proxy

networks:
  proxy:
    external: true
  immich_internal:
    driver: bridge

volumes: # Define named volumes if not using host paths for everything
  # pgdata: # This is handled by DB_DATA_LOCATION bind mount
  tsdata: # Typesense data, created as a named volume within the stack directory context
  # model-cache: # This is handled by MODEL_CACHE_LOCATION bind mount
