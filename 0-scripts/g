#!/bin/bash

# Git Tool Script
# Provides utilities for common Git operations and troubleshooting.

if ! command -v git &>/dev/null; then
    read -p "git not found. Install (y/N)? " -n 1 -r REPLY && echo
    [[ $REPLY =~ ^[Yy]$ ]] && (sudo apt update && sudo apt install -y git) || { echo "git not installed. Exiting."; exit 1; }
fi

# Store the directory where the script was invoked
INVOCATION_DIR="$(pwd)"

# --- Helper Functions ---

# C_NORMAL="\033[0m"
# C_BOLD="\033[1m"
# C_DIM="\033[2m" # You might not need this one, but it's an option
# 
# C_RED="\033[0;31m"
# C_GREEN="\033[0;32m"
# C_YELLOW="\033[0;33m" # For your M default
# C_BLUE="\033[0;34m"   # For general blue text like the icon
# C_MAGENTA="\033[0;35m" # For your R default
# C_CYAN="\033[0;36m"    # For your ?? default
# 
# C_BOLD_RED="\033[1;31m"
# C_BOLD_GREEN="\033[1;32m"
# C_BOLD_YELLOW="\033[1;33m"
# C_BOLD_BLUE="\033[1;34m"
# C_BOLD_MAGENTA="\033[1;35m"
# C_BOLD_CYAN="\033[1;36m"

echo_blue() { echo -e "\033[1;34m$@\033[0m"; }
echo_green() { echo -e "\033[1;32m$@\033[0m"; }
echo_red() { echo -e "\033[1;31m$@\033[0m"; }
echo_yellow() { echo -e "\033[1;33m$@\033[0m"; }

display_and_run() {
    echo -e "\033[1;34m$@\033[0m" # Echo the command
    eval "$@" # Execute the command
}

print_git_status_legend() {
    # --- Essential ANSI Color Codes (defined locally for this function) ---
    local C_NORMAL="\033[0m"
    local C_BOLD="\033[1m"

    local C_RED="\033[0;31m"
    local C_GREEN="\033[0;32m"
    local C_YELLOW="\033[0;33m"
    local C_BLUE="\033[0;34m"
    local C_MAGENTA="\033[0;35m"
    local C_CYAN="\033[0;36m"

    local C_BOLD_RED="\033[1;31m"
    local C_BOLD_GREEN="\033[1;32m"
    local C_BOLD_YELLOW="\033[1;33m"
    local C_BOLD_BLUE="\033[1;34m"
    local C_BOLD_MAGENTA="\033[1;35m"
    local C_BOLD_CYAN="\033[1;36m"
    # --- End Essential Color Codes ---

    # User's chosen colors for general letter meanings in the top line
    local C_USER_MODIFIED="${C_BOLD_YELLOW}M${C_NORMAL}"
    local C_USER_ADDED="${C_BOLD_GREEN}A${C_NORMAL}"
    local C_USER_DELETED="${C_BOLD_RED}D${C_NORMAL}"
    local C_USER_RENAMED="${C_BOLD_MAGENTA}R${C_NORMAL}"
    local C_USER_UNTRACKED="${C_BOLD_CYAN}??${C_NORMAL}" # Valid variable name

    # Specific colors for XY example outputs (to better match typical terminal)
    local C_EX_M_MOD="${C_BOLD_RED}M${C_NORMAL}"    # Red M for modifications
    local C_EX_A_ADD="${C_BOLD_GREEN}A${C_NORMAL}"  # Green A for staged adds
    local C_EX_QQ_UNTRK="${C_BOLD_CYAN}??${C_NORMAL}" # Cyan ?? for untracked
    local C_EX_UU_CONF="${C_BOLD_RED}UU${C_NORMAL}" # Red UU for conflicts

    # Legend Text Construction
    local L1_ICON="${C_BOLD_BLUE}üîç${C_NORMAL}"
    local L1_TEXT1="'git status --short' codes: ${C_BOLD_GREEN}X${C_NORMAL}${C_BOLD_RED}Y${C_NORMAL} PATH (${C_BOLD_GREEN}X${C_NORMAL}=Staged, ${C_BOLD_RED}Y${C_NORMAL}=Unstaged). Codes:"
    local L1_CODES="${C_USER_MODIFIED}=Mod ${C_USER_ADDED}=Add ${C_USER_DELETED}=Del ${C_USER_RENAMED}=Ren ${C_USER_UNTRACKED}=Untrk"

    local L2_STAGED="${C_BOLD_GREEN}Staged (Index)${C_NORMAL}:      Changes prepared for 'git commit'."
    local L2_UNSTAGED="${C_BOLD_RED}Unstaged (Worktree)${C_NORMAL}: File modifications not yet staged for commit."

    # Examples
    local EX_M_S_DESC="Staged Mod:"   ; local EX_M_S_CODE="${C_EX_M_MOD} "
    local EX_M_U_DESC="Unstaged Mod:" ; local EX_M_U_CODE=" ${C_EX_M_MOD}"
    local EX_MM_DESC="Both Mod:"      ; local EX_MM_CODE="${C_EX_M_MOD}${C_EX_M_MOD}"
    local EX_A_S_DESC="Staged Add:"   ; local EX_A_S_CODE="${C_EX_A_ADD} "
    local EX_QQ_DESC="Untracked:"    ; local EX_QQ_CODE="${C_EX_QQ_UNTRK}" # Contains "??", valid
    local EX_UU_DESC="Conflict:"     ; local EX_UU_CODE="${C_EX_UU_CONF}"

    # Output the legend
    echo
    echo -e "${L1_ICON} ${L1_TEXT1} ${L1_CODES}"
    echo -e "  ${L2_STAGED}"
    echo -e "  ${L2_UNSTAGED}"
    echo -e "  ${C_BOLD_BLUE}e.g.${C_NORMAL}"
    # printf for alignment. %b interprets escape sequences in the CODE variables.
    echo -e "    $(printf "%-14s%-15b | %-14s%-15b | %-12s%-15b" \
        "$EX_M_S_DESC" "$EX_M_S_CODE" \
        "$EX_M_U_DESC" "$EX_M_U_CODE" \
        "$EX_MM_DESC" "$EX_MM_CODE")"
    echo -e "    $(printf "%-14s%-15b | %-14s%-15b | %-12s%-15b" \
        "$EX_A_S_DESC" "$EX_A_S_CODE" \
        "$EX_QQ_DESC" "$EX_QQ_CODE" \
        "$EX_UU_DESC" "$EX_UU_CODE")"
}

# --- End Helper Functions ---

if [ $# -eq 0 ]; then
    echo "Git Tool. Usage: g [option] <args>"
    echo "Options:"
    echo "  acp <message>        Add-Commit-Push: status, add -A, basic secret scan, commit -m <message>, push"
    echo "                       Also accepts --debug to show ssh -v output during the push operation"
    echo "  a                    Add All: git add .  (Stage all changes in current folder only)"
    echo "  A                    Add All: git add -A  (Stage all changes from root of repo)"
    echo "  c <message>          Commit:  git commit -m <message>"
    echo "  s                    Status:  Show the current repository status (git status)"
    echo "  ss                   Status Short: git status --short"
    echo "  set-git <ssh_url>    Change current repo's 'origin' remote URL to the provided SSH URL."
    echo "                       Example: g set-git git@github.com:user/repo.git"
    echo "                       (Note: help text in script used to say set-ssh)"
    echo "  ps|push              Push: Update to the current branch's upstream (git push)"
    echo "  pl|pull              Pull: Update latest changes from the remote to local (git pull --ff-only after check)"
    echo "  cl|clone <url> [dir] Clone a full project from a git repository and report stats"
    echo "  cl1 <url> [dir]      Clone, but with max depth 1 only, and report stats"
    echo "  d|diff               Diff: Show unstaged changes (git diff)"
    echo "  ds                   Diff Staged: Show staged changes (git diff --staged)"
    echo "  lshort               Log with commit history in short format (git log --oneline --graph --decorate --all)"
    echo "  ldiffs               Log with full commit history and diffs (git log --stat --patch)"
    echo "  lfiles               Log show status of files changed in each commit (git log --name-status --pretty)"
    echo "  b|branch             Branch: List branches, highlight current branch"
    echo "  ch|co|checkout <br>  Checkout: Switch to a different branch"
    echo "  nb <name>            New Branch: Create and switch to a new branch"
    echo "  rpo                  Prune Remote Origin: git remote prune origin"
    echo "  f                    Fetch: Update remote refs without merging (git fetch)"
    echo "  m <branch>           Merge: Merge the specified branch into the current one"
    echo "  rs <commit>          Reset Soft: Reset to the given commit but keep changes (git reset --soft <commit>)"
    echo "  rh <commit>          Reset Hard: Reset to the given commit and discard changes (git reset --hard <commit>)"
    echo "  stash                Stash: Save uncommitted changes (git stash)"
    echo "  stpush <message>     Stash with a message (git stash push -m <message>)"
    echo "  stpop                Pop last stash (git stash pop)"
    echo "  clear                Clean untracked files and directories (git clean -fd DANGEROUS!)"
    echo "  t                    Troubleshooting Help: Show common Git fixes"
    echo
    exit 0
fi

option=$1
shift  # Shift to access arguments for the specific command

# --- Conditional CD to Project Root or Invocation Directory ---
# For most commands, we want to operate within the Git repository
# that the user is currently in (INVOCATION_DIR).
# For clone operations, we want to operate from INVOCATION_DIR directly.
case "$option" in
    cl|clone|cl1)
        # These commands should run *directly* in the INVOCATION_DIR.
        # No attempt to find a .git repo here, as we might be cloning into a new area.
        if [ "$(pwd)" != "$INVOCATION_DIR" ]; then # If somehow not in INVOCATION_DIR, go there.
            cd "$INVOCATION_DIR" || { echo_red "‚ùå Error: Could not return to invocation directory '$INVOCATION_DIR'."; exit 1; }
        fi
        # echo_blue "‚ÑπÔ∏è Operating from invocation directory: $(pwd) for $option" # For debugging
        ;;
    a|A|c|s|ss|acp|ps|push|pl|pull|d|diff|ds|lshort|ldiffs|lfiles|b|branch|ch|co|checkout|nb|rpo|f|m|rs|rh|stash|stpush|stpop|clear|set-git|t)
        # These commands (mostly) need to operate within a Git repository context.
        # We'll determine the root of the Git repo containing INVOCATION_DIR.
        # 't' (troubleshooting) and 'set-git' (if showing help without args) are exceptions.

        TARGET_PROJECT_ROOT="$(git -C "$INVOCATION_DIR" rev-parse --show-toplevel 2>/dev/null)"

        if [ -n "$TARGET_PROJECT_ROOT" ] && [ -d "$TARGET_PROJECT_ROOT" ]; then
            # Successfully found the project root containing INVOCATION_DIR.
            # Change current directory to this root for subsequent git commands.
            cd "$TARGET_PROJECT_ROOT" || { echo_red "‚ùå Error: Could not change to project root '$TARGET_PROJECT_ROOT'."; exit 1; }
            # echo_blue "‚ÑπÔ∏è Operating from Git project root: $(pwd) for $option" # For debugging
        else
            # Not in a Git repository (or INVOCATION_DIR is not part of one).
            # Check if the command is one that can run without a repo context.
            # Note: after 'shift', $1 is the first argument to the command (e.g. for set-git).
            if [[ "$option" == "t" || ("$option" == "set-git" && -z "$1") ]]; then
                # 't' (troubleshooting help) and 'set-git' (when showing its own help, i.e. no URL arg) are fine.
                # Ensure we are in INVOCATION_DIR for consistency.
                if [ "$(pwd)" != "$INVOCATION_DIR" ]; then
                     cd "$INVOCATION_DIR" || { echo_red "‚ùå Error: Could not change to invocation directory '$INVOCATION_DIR'."; exit 1; }
                fi
                # echo_blue "‚ÑπÔ∏è Operating from invocation directory (command doesn't need repo or not in one): $(pwd) for $option" # For debugging
            else
                # All other commands in this list require a Git repository.
                echo_red "‚ùå Error: Not a Git repository (or any of the parent directories of '$INVOCATION_DIR')."
                echo_red "Please run 'g $option' from within a Git working tree."
                exit 1
            fi
        fi
        ;;
    *) # Unknown option
        echo_red "‚ùå Invalid option: '$option'. Use 'g' for available commands."
        # Ensure PWD is INVOCATION_DIR if it was changed (though script will exit).
        if [ "$(pwd)" != "$INVOCATION_DIR" ]; then
             cd "$INVOCATION_DIR" || { echo_red "‚ùå Error: Could not return to invocation directory '$INVOCATION_DIR'."; exit 1; }
        fi
        exit 1
        ;;
esac
# --- End Conditional CD ---


case "$option" in
    a)
        display_and_run git add .
        ;;

    A)
        display_and_run git add -A
        ;;

    cl|clone|cl1)
        INPUT_URL="$1" # Store the original input (now $1 after the initial shift)
        REPO_URL=""    # Variable to hold the final constructed URL

        if [ -z "$INPUT_URL" ]; then
            echo_red "‚ùå Error: Repository URL or shorthand is required for clone."
            exit 1
        fi

        # Check for shorthand formats
        if [[ "$INPUT_URL" =~ ^gl/ ]]; then
            REPO_PATH="${INPUT_URL#gl/}" 
            REPO_URL="https://gitlab.com/${REPO_PATH}"
            echo_blue "Detected GitLab shorthand. Cloning from: $REPO_URL"
        elif [[ "$INPUT_URL" =~ ^[a-zA-Z0-9_-]+/[a-zA-Z0-9_.-]+$ && ! "$INPUT_URL" =~ :// && ! "$INPUT_URL" =~ @ ]]; then
             # Basic GitHub shorthand: user/repo or org/repo (avoid matching full URLs)
            REPO_URL="https://github.com/${INPUT_URL}"
            echo_blue "Detected GitHub shorthand. Cloning from: $REPO_URL"
        else
            REPO_URL="$INPUT_URL"
            echo_blue "Assuming full URL or other format. Cloning from: $REPO_URL"
        fi

        CLONE_DIR=$(echo "$REPO_URL" | sed -E 's/.*\/([^/]+)(\.git)?$/\1/')

        if [ -z "$CLONE_DIR" ]; then
             echo_red "‚ùå Error: Could not determine clone directory name from URL: $REPO_URL"
             exit 1
        fi

        # Construct CLONE_ARGS. $1 is the URL, $@ after that are additional args to clone.
        CLONE_ARGS_ARRAY=("$REPO_URL") # Start with the constructed URL
        # Remove the URL ($1) from the list of arguments to pass to git clone
        # The remaining arguments ($2, $3, etc. from the user's call to 'g cl <url> <dir>') are now in "$@"
        # E.g. if user typed "g cl user/repo mydir", $1="user/repo", $2="mydir"
        # After 'option=$1; shift', $1="user/repo", $2="mydir"
        # Inside 'cl' case, INPUT_URL=$1 (="user/repo")
        # We need to pass $2 (="mydir") if it exists.
        # The original script did:
        # shift # Shift off the original input URL ($1) from the 'g' script's perspective
        # CLONE_ARGS+=("$@") # Add any remaining arguments
        # This 'shift' within the 'cl' case is relative to args *after* 'cl'
        # So, if command was `g cl <url> <target_dir>`,
        # $1 is <url>, $2 is <target_dir> (within the `cl` case block)
        # CLONE_ARGS_ARRAY already has REPO_URL. We need to add $2 if it exists.
        
        # Simpler: build array from all args passed to 'cl'/'cl1'
        # The arguments to 'cl' (e.g. URL, optional target dir) are in "$@"
        # because of the global 'shift' after 'option=$1'.
        # So if `g cl <url> <dir>`, then within `cl)` block, $1 is <url> and $2 is <dir>.
        # We already put REPO_URL (derived from $1) in CLONE_ARGS_ARRAY.
        # Now add $2, $3... if they exist.
        
        TEMP_ARGS=("$@") # Contains URL and potentially target_dir, etc.
        unset TEMP_ARGS[0] # Remove the URL part, as REPO_URL is already set
        
        for arg in "${TEMP_ARGS[@]}"; do
            CLONE_ARGS_ARRAY+=("$arg")
        done

        if [ "$option" = "cl1" ]; then
            CLONE_ARGS_ARRAY+=("--depth=1")
        fi

        display_and_run "git clone ${CLONE_ARGS_ARRAY[*]}"

        if [ $? -ne 0 ]; then
            echo_red "‚ùå Git clone failed."
            exit 1
        fi
        
        echo_blue "Gathering statistics for the cloned repository..."
        ACTUAL_CLONE_DIR_NAME="${CLONE_ARGS_ARRAY[1]}" # User-specified dir if present
        if [ -z "$ACTUAL_CLONE_DIR_NAME" ]; then      # Or default dir name
            ACTUAL_CLONE_DIR_NAME="$CLONE_DIR"
        fi

        if [ -d "$ACTUAL_CLONE_DIR_NAME" ]; then
            cd "$ACTUAL_CLONE_DIR_NAME" || { echo_red "‚ùå Error: Could not change to cloned directory '$ACTUAL_CLONE_DIR_NAME'."; exit 1; }
            FILE_COUNT=$(find . -type f | wc -l)
            DIR_COUNT=$(find . -type d -mindepth 1 | wc -l)
            TOTAL_SIZE=$(du -sh .)
            echo_blue "Clone successful!"
            echo "Repository: $ACTUAL_CLONE_DIR_NAME"
            echo "Number of files: $(echo $FILE_COUNT | tr -d ' ')" # Trim whitespace
            echo "Number of folders: $(echo $DIR_COUNT | tr -d ' ')" # Trim whitespace
            echo "Total size: $(echo $TOTAL_SIZE | cut -f1)" # Trim directory name part
            cd "$INVOCATION_DIR" || { echo_red "‚ùå Error: Could not return to invocation directory after stats."; exit 1; }
        else
            echo_red "‚ö†Ô∏è Warning: Cloned directory '$ACTUAL_CLONE_DIR_NAME' not found. If you specified a custom directory name or if cloning failed silently, stats will not be gathered."
            echo_blue "To get stats manually, navigate into the cloned directory and run 'du -sh .', 'find . -type f | wc -l', and 'find . -type d -mindepth 1 | wc -l'."
        fi
        ;;

    c)
        if [ -z "$1" ]; then
            echo_red "‚ùå Error: Commit message is required."
            exit 1
        fi
        display_and_run git commit -m "$@" # Use "$@" to capture multi-word messages
        ;;

    s)
        display_and_run git status
        print_git_status_legend
        ;;

    ss)
        display_and_run git status --short
        print_git_status_legend
        ;;

    acp)
        # The 'acp' option itself is $option. Args start from $1.
        DEBUG_MODE=0
        COMMIT_MSG_PARTS=()

        # Parse arguments for acp (commit message parts and --debug)
        TEMP_ACP_ARGS=("$@") 
        idx=0
        while [ $idx -lt ${#TEMP_ACP_ARGS[@]} ]; do
            arg="${TEMP_ACP_ARGS[$idx]}"
            case "$arg" in
                --debug) DEBUG_MODE=1 ;;
                *) COMMIT_MSG_PARTS+=("$arg") ;;
            esac
            ((idx++))
        done

        if [[ ${#COMMIT_MSG_PARTS[@]} -eq 0 ]]; then
            COMMIT_STR="Various" # Default commit message
            echo -e "\033[1;33m‚ÑπÔ∏è No commit message provided. Using default: \"$COMMIT_STR\"\033[0m"
        else
            COMMIT_STR="${COMMIT_MSG_PARTS[*]}"
        fi

        echo "====="
        display_and_run git status --short
        echo -e "\033[1;34müîç Git status legend:\033[0m Left=staged Right=unstaged \033[1;33mM\033[0m=mod \033[1;32mA\033[0m=added \033[1;31mD\033[0m=del \033[1;35mR\033[0m=renamed \033[1;36m??\033[0m=untracked"
        echo -e "    e.g.  \033[1;33mM \033[0m=staged mod,  \033[1;33m M\033[0m=unstaged mod,  \033[1;33mMM\033[0m=both,  \033[1;36m??\033[0m=new file"

        echo "====="
        display_and_run git add -A --verbose

        # Check if there are any staged changes. If not, inform and exit acp.
        # 'git diff --staged --quiet' exits 0 if no staged changes, 1 if there are.
        if git diff --staged --quiet; then
            echo -e "\033[1;32m‚úÖ No changes staged to commit. Working tree clean or all changes already committed.\033[0m"
            # If you want to still offer to push existing local commits, you could add that logic here.
            # For now, exiting the 'acp' operation as per the implied request.
            # If this 'acp)' is a function in a larger script, use 'return'. If it's standalone, 'exit'.
            exit 0 
        fi

        # --- Begin Secret Scan ---
        echo "====="
        POTENTIAL_SECRETS_FOUND=0
        SECRETS_DETECTED_MESSAGES=""
        FOUND_GENERIC_MATCHES_BUT_ALL_WERE_PLACEHOLDERS=0

        GH_TOKEN_PATTERN='gh[pusr]_[a-zA-Z0-9]{36}'
        GENERIC_KEY_FULL_PATTERN='(API_KEY|SECRET_KEY|JWT_SECRET|PRIVATE_KEY|ACCESS_TOKEN|CLIENT_SECRET|AUTH_TOKEN|SESSION_KEY|TOKEN)\s*[:=]\s*["'\'']?[A-Za-z0-9\-_/+]{20,}["'\'']?'
        PLACEHOLDER_VALUE_FILTER_PATTERN='=\s*["'\'']?(YOUR|PLACEHOLDER|DUMMY|EXAMPLE|ENTER|PASTE)[A-Z0-9_]*HERE["'\'']?|api_key_here|token_here|YOUR_[A-Z0-9_]+_TOKEN'
        PEM_KEY_PATTERN='-----BEGIN (RSA|OPENSSH|EC|PGP) PRIVATE KEY-----'

        echo "Scanning tracked files (respecting .gitignore patterns) for potential secrets..."
        echo "Patterns: 1. GitHub Token, 2. Generic Key (updated), 3. PEM Key"
        echo

        repo_root=$(git rev-parse --show-toplevel 2>/dev/null)
        if [ -z "$repo_root" ]; then
            echo -e "\033[1;31m‚ùå Error: Could not determine repository root. Aborting scan.\033[0m"
            return 1
        fi

        SCAN_FILES_TEMP_FILE=""
        SCAN_FILES_TEMP_FILE=$(mktemp /tmp/scan_files.XXXXXX)

        if [ -z "$SCAN_FILES_TEMP_FILE" ] || [ ! -f "$SCAN_FILES_TEMP_FILE" ]; then
            echo -e "\033[1;31m‚ùå Error: Could not create temporary file. Aborting scan.\033[0m"
            # Attempt to clean up if one was partially created, though mktemp usually handles this
            rm -f "$SCAN_FILES_TEMP_FILE" 2>/dev/null
            return 1
        fi
        # Trap will handle cleanup of SCAN_FILES_TEMP_FILE.
        # RAW_GENERIC_MATCHES_OUTPUT_TEMP_FILE is created and deleted within the if block.
        trap 'rm -f "$SCAN_FILES_TEMP_FILE" 2>/dev/null' EXIT HUP INT QUIT TERM

        > "$SCAN_FILES_TEMP_FILE" # Ensure temp file is empty

        while IFS= read -r -d $'\0' file_to_check; do
            # `git check-ignore --no-index -q` exits 0 if path matches an ignore pattern.
            # We scan if it DOES NOT match an ignore pattern (exits 1).
            if ! git -C "$repo_root" check-ignore --no-index -q -- "$file_to_check" 2>/dev/null; then
                printf "%s\0" "$file_to_check" >> "$SCAN_FILES_TEMP_FILE"
            fi
        done < <(git -C "$repo_root" ls-files -z)

        if [ -s "$SCAN_FILES_TEMP_FILE" ]; then
            echo "Checking for GitHub tokens..."
            if xargs -0 -r --no-run-if-empty -a "$SCAN_FILES_TEMP_FILE" git -C "$repo_root" grep -E --line-number --color=always -e "$GH_TOKEN_PATTERN" --; then
                POTENTIAL_SECRETS_FOUND=1
                SECRETS_DETECTED_MESSAGES+=$'\n\033[1;33m  - Potential GitHub tokens found. Review matches.\033[0m'
            fi

            echo "Checking for generic API/Secret keys (case-insensitive for keywords)..."
            RAW_GENERIC_MATCHES_OUTPUT_TEMP_FILE=$(mktemp /tmp/raw_grep_output.XXXXXX)
            if [ -n "$RAW_GENERIC_MATCHES_OUTPUT_TEMP_FILE" ] && [ -f "$RAW_GENERIC_MATCHES_OUTPUT_TEMP_FILE" ]; then
                # tee will show output to terminal (stderr) and also save to RAW_GENERIC_MATCHES_OUTPUT_TEMP_FILE
                xargs -0 -r --no-run-if-empty -a "$SCAN_FILES_TEMP_FILE" git -C "$repo_root" grep -iE --line-number --color=always -e "$GENERIC_KEY_FULL_PATTERN" -- | tee "$RAW_GENERIC_MATCHES_OUTPUT_TEMP_FILE" >&2
                RAW_GENERIC_MATCHES=$(<"$RAW_GENERIC_MATCHES_OUTPUT_TEMP_FILE")
                rm -f "$RAW_GENERIC_MATCHES_OUTPUT_TEMP_FILE"

                if [ -n "$RAW_GENERIC_MATCHES" ]; then
                    FILTERED_GENERIC_MATCHES=$(echo "$RAW_GENERIC_MATCHES" | grep -vEi "$PLACEHOLDER_VALUE_FILTER_PATTERN")
                    if [ -n "$FILTERED_GENERIC_MATCHES" ]; then
                        POTENTIAL_SECRETS_FOUND=1
                        SECRETS_DETECTED_MESSAGES+=$'\n\033[1;33m  - Potential generic keys/secrets found (after filtering). Review matches.\033[0m'
                    else
                        if [ -n "$RAW_GENERIC_MATCHES" ]; then
                           FOUND_GENERIC_MATCHES_BUT_ALL_WERE_PLACEHOLDERS=1
                        fi
                    fi
                fi
            else
                echo -e "\033[1;33m‚ö†Ô∏è Warning: Could not create temp file for generic key output. Grep output might not be fully processed for placeholders.\033[0m"
                # Fallback: grep directly and check exit status for POTENTIAL_SECRETS_FOUND, less precise for placeholders
                if xargs -0 -r --no-run-if-empty -a "$SCAN_FILES_TEMP_FILE" git -C "$repo_root" grep -iE --line-number --color=always -e "$GENERIC_KEY_FULL_PATTERN" --; then
                    POTENTIAL_SECRETS_FOUND=1 # Less precise, as this won't filter placeholders
                    SECRETS_DETECTED_MESSAGES+=$'\n\033[1;33m  - Potential generic keys/secrets found. Review matches.\033[0m'
                fi
            fi

            echo "Checking for private key headers..."
            if xargs -0 -r --no-run-if-empty -a "$SCAN_FILES_TEMP_FILE" git -C "$repo_root" grep -E --line-number --color=always -e "$PEM_KEY_PATTERN" --; then
                POTENTIAL_SECRETS_FOUND=1
                SECRETS_DETECTED_MESSAGES+=$'\n\033[1;33m  - Potential private key headers found. Review matches.\033[0m'
            fi
        else
            echo "No scannable (tracked files not matching .gitignore patterns) files to scan for secrets."
        fi

        rm -f "$SCAN_FILES_TEMP_FILE" 2>/dev/null
        trap - EXIT HUP INT QUIT TERM # Clear the trap
        # --- End Secret Scan ---
        ####################

        if [ "$POTENTIAL_SECRETS_FOUND" -ne 0 ]; then
            echo -e "\033[1;31m‚ùå CAUTION: Potential secrets were detected during the scan:\033[0m"
            echo -e "$SECRETS_DETECTED_MESSAGES"
            echo -e "\033[1;31mPlease review these findings carefully before committing.\033[0m"
        else
            echo -e "\033[1;32m‚úÖ Basic secret scan passed. No obvious secrets detected in tracked files.\033[0m"
            if [ "$FOUND_GENERIC_MATCHES_BUT_ALL_WERE_PLACEHOLDERS" -eq 1 ]; then
                echo -e "\033[1;33m‚ö†Ô∏è Heads up: Some lines matched generic secret keywords (e.g., 'API', 'TOKEN') but appeared to be placeholders.\033[0m"
                echo -e "\033[1;33m   These were displayed above. Please quickly verify they are indeed safe before proceeding.\033[0m"
            fi
        fi

        echo -e "\033[1;34mPlease review the output of the basic secrets check above.\033[0m"
        echo -e "\033[1;33mCommitting secrets can lead to repository rejection and complex history rewriting.\033[0m"
        echo -e "\033[1;33mIf uncertain, run a comprehensive scan (e.g., Gitleaks) before committing.\033[0m"
        echo
        echo "--------------------------------------------------"
        echo_blue "‚ÑπÔ∏è You are about to commit to the following project:"
        PROJECT_DIR_DISPLAY=$(pwd)
        ORIGIN_URL_DISPLAY=$(git config --get remote.origin.url 2>/dev/null)
        echo_blue "    Project Root: $PROJECT_DIR_DISPLAY"
        if [ -n "$ORIGIN_URL_DISPLAY" ]; then
            echo_blue "    Remote 'origin': $ORIGIN_URL_DISPLAY"
        else
            echo_red "    Remote 'origin': Not configured or could not be determined."
        fi
        echo "--------------------------------------------------"

        read -rp $"Do you want to commit these changes with message \"$COMMIT_STR\"? [y/N]: " confirm_commit

        if [[ ! "$confirm_commit" =~ ^[Yy]$ ]]; then
            echo -e "\033[1;33mCommit cancelled by user.\033[0m"
            # If this 'acp)' is a function in a larger script, use 'return 1'. If it's standalone, 'exit 1'.
            return 1
        fi

        echo "Attempting to commit changes..."
        commit_output_and_error=$(git commit --verbose -m "$COMMIT_STR" 2>&1)
        commit_status=$?
        echo "$commit_output_and_error"

        if [ $commit_status -eq 0 ]; then
            echo -e "\033[1;32m‚úÖ New commit created successfully.\033[0m"
        elif echo "$commit_output_and_error" | grep -q -E "nothing to commit|no changes added to commit|nothing added to commit but untracked files present"; then
            # This block will now primarily be a fallback or for situations where --allow-empty might be used (though not currently supported by acp)
            echo -e "\033[1;33m‚ÑπÔ∏è No new changes were staged for this commit attempt. Previous local commits (if any) can still be pushed.\033[0m"
        else
            echo -e "\033[1;31m‚ùå Commit command failed for an unexpected reason. Review output above. Aborting attempt to push.\033[0m"
            # If this 'acp)' is a function in a larger script, use 'return 1'. If it's standalone, 'exit 1'.
            return 1
        fi

        echo "====="
        CURRENT_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null)
        if [ -z "$CURRENT_BRANCH" ]; then
            echo_red "‚ùå Error: Could not determine current branch. Are you in a detached HEAD state?"
            # If this 'acp)' is a function in a larger script, use 'return 1'. If it's standalone, 'exit 1'.
            exit 1
        fi

        echo -e "\033[1;33mWarning: If you are using a VPN, it might interfere with the git push operation.\033[0m"
        echo -e "\033[1;33mPlease consider temporarily disconnecting any active VPNs on this system before continuing.\033[0m"

        if [[ $DEBUG_MODE -eq 1 ]]; then
            display_and_run env GIT_SSH_COMMAND='ssh -v' git push origin "$CURRENT_BRANCH"
        else
            read -rp $"‚úÖ Ready to push to origin/$CURRENT_BRANCH ‚Äî press ENTER to confirm or Ctrl+C to cancel... "
            display_and_run git push origin "$CURRENT_BRANCH"
        fi
        ;; # End of acp) case

    ps|push)
        display_and_run git push
        ;;

    pl|pull)
        echo_blue "üì° Fetching latest changes from remote..."
        display_and_run "git fetch"

        LOCAL_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
        if [ -z "$LOCAL_BRANCH" ]; then
            echo_red "‚ùå Error: Could not determine current local branch."
            exit 1
        fi
        REMOTE_BRANCH="origin/$LOCAL_BRANCH" # Assuming 'origin' and same branch name

        echo_blue "üìå Checking status between local '$LOCAL_BRANCH' and remote '$REMOTE_BRANCH'..."
        
        # Check if remote branch exists
        if ! git show-ref --verify --quiet "refs/remotes/$REMOTE_BRANCH"; then
            echo_yellow "‚ö†Ô∏è Remote branch '$REMOTE_BRANCH' does not exist or has not been fetched."
            echo_yellow "You might need to push the local branch first if it's new: git push -u origin $LOCAL_BRANCH"
            echo_yellow "Attempting a simple 'git pull' which might set up tracking or pull from default."
            display_and_run "git pull" # Fallback to simple pull
            exit $?
        fi

        echo "==== LOCAL vs REMOTE diff summary ($LOCAL_BRANCH vs $REMOTE_BRANCH) ===="
        # Use ... to show difference from common ancestor to remote tip
        display_and_run "git diff --name-status $LOCAL_BRANCH...$REMOTE_BRANCH" 

        echo
        read -rp "üîç Would you like to review diffs of changed files? (y/N): " confirm_diff_review
        if [[ "$confirm_diff_review" =~ ^[Yy]$ ]]; then
            CHANGED_FILES=$(git diff --name-only "$LOCAL_BRANCH...$REMOTE_BRANCH")
            if [ -n "$CHANGED_FILES" ]; then
                for file in $CHANGED_FILES; do
                    echo -e "\n==== Diff for: $file ===="
                    # Use pager for long diffs
                    git diff "$LOCAL_BRANCH...$REMOTE_BRANCH" -- "$file" | cat
                done
            else
                echo_blue "No file differences to review."
            fi
        fi
        
        # A simple 'git pull --ff-only' is often safest for scripted pulls.
        # A more complex check for conflicts before attempting merge isn't strictly necessary if ff-only is used.
        echo_blue "Attempting a fast-forward only pull..."
        read -rp "‚ùì Proceed with pull (fast-forward only) from $REMOTE_BRANCH into $LOCAL_BRANCH? (Y/n): " confirm_pull_ff
        if [[ "$confirm_pull_ff" =~ ^[Nn]$ ]]; then
            echo -e "\033[1;33m‚ÑπÔ∏è Pull cancelled by user.\033[0m"
        else
            echo "===="
            display_and_run "git pull --ff-only origin $LOCAL_BRANCH"
            # Check status, git pull can exit 0 even if not up-to-date if ff-only fails
            if [ $? -ne 0 ]; then
                 echo_red "‚ùå Pull (ff-only) failed. Merge required or other issue."
                 echo_yellow "Try 'g pl' again and if it offers a merge, consider it, or pull manually: 'git pull'"
            else
                 echo_green "‚úÖ Pull successful or already up-to-date."
            fi
        fi
        ;;

    d|diff)
        display_and_run git diff
        ;;

    ds)
        display_and_run git diff --staged
        ;;

    lshort)
        display_and_run git log --oneline --graph --decorate --all
        ;;

    ldiffs)
        display_and_run git log --stat --patch
        ;;
    lfiles)
        display_and_run git log --name-status --pretty=format:"%C(auto)%h %<(20)%ad %<(15)%an %d %s" --date=short
        ;;

    b|branch)
        display_and_run git branch --sort=-committerdate --color=always | sed -e '/^\*/!s/^/  /' # Ensure color and formatting
        ;;

    ch|co|checkout)
        if [ -z "$1" ]; then
            echo_red "‚ùå Error: Branch name is required for checkout."
            exit 1
        fi
        display_and_run git checkout "$1"
        ;;

    nb)
        if [ -z "$1" ]; then
            echo_red "‚ùå Error: Branch name is required for new branch."
            exit 1
        fi
        display_and_run git checkout -b "$1"
        ;;

    rpo)
        display_and_run git remote prune origin
        ;;

    f)
        display_and_run git fetch --all --prune
        ;;

    m)
        if [ -z "$1" ]; then
            echo_red "‚ùå Error: Branch name is required for merge."
            exit 1
        fi
        display_and_run git merge "$1"
        ;;

    rs)
        if [ -z "$1" ]; then
            echo_red "‚ùå Error: Commit hash/reference is required for soft reset."
            exit 1
        fi
        display_and_run git reset --soft "$1"
        ;;

    rh)
        if [ -z "$1" ]; then
            echo_red "‚ùå Error: Commit hash/reference is required for hard reset."
            exit 1
        fi
        read -rp $'\033[1;31m‚ö†Ô∏è WARNING: This will discard all uncommitted changes in tracked files and reset your current branch to the specified commit. Are you sure? (y/N):\033[0m ' confirm_hard_reset
        if [[ "$confirm_hard_reset" =~ ^[Yy]$ ]]; then
            display_and_run git reset --hard "$1"
        else
            echo_blue "Hard reset cancelled."
        fi
        ;;

    stash)
        display_and_run git stash
        ;;

    stpush)
        if [ -z "$1" ]; then
            # Original script had error here, but git stash push without message is valid.
            # Let's allow it, or use user's original logic if they prefer an error.
            # For now, matching user's error:
            echo_red "‚ùå Error: Message is required for stash push (stpush)."
            echo_blue "  To stash without a message, use 'g stash'"
            exit 1
        fi
        display_and_run git stash push -m "$@" # Use "$@" for multi-word message
        ;;

    stpop)
        display_and_run git stash pop
        ;;

    clear) # DANGEROUS
        echo_red "‚ö†Ô∏è WARNING: This will permanently delete all untracked files and directories!"
        echo_red "This includes build artifacts, new files not yet added to git, etc."
        read -rp "Are you absolutely sure you want to run 'git clean -fd'? (Type 'yes' to confirm): " confirm_clear
        if [[ "$confirm_clear" == "yes" ]]; then
            display_and_run git clean -fd
            echo_blue "Untracked files and directories have been removed."
        else
            echo_blue "Operation cancelled."
        fi
        ;;

    set-git) # Note: help text said 'set-ssh'
        if [ -z "$1" ]; then # $1 is the URL argument after 'set-git'
            echo_blue "Understanding Git Remote URLs: HTTPS vs SSH"
            echo "--------------------------------------------"
            echo "Git uses a 'remote' URL to know where to fetch from and push to."
            echo "The primary remote is usually named 'origin'."
            echo "There are two main types for services like GitHub, GitLab, etc:"
            echo ""
            echo "1. HTTPS (e.g., https://github.com/user/repo.git)"
            echo "   - Authentication often uses Personal Access Tokens (PATs)."
            echo "   - Can be simpler for cloning public repos without SSH setup."
            echo ""
            echo "2. SSH (e.g., git@github.com:user/repo.git)"
            echo "   - Authentication uses SSH keys."
            echo "   - Recommended for frequent use, especially if you have SSH keys configured."
            echo ""
            echo_blue "To change the 'origin' remote URL of the current repository to an SSH URL:"
            echo "g set-git <your_ssh_url>"
            echo ""
            echo "Example (replace with your actual username and repo name):"
            echo "g set-git git@github.com:youruser/yourrepo.git"
            echo ""
            echo "This will run: git remote set-url origin <your_ssh_url>"
            echo "Current remotes in this context (if any):"
            if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
                git remote -v
            else
                echo " (Not currently inside a Git repository to show remotes)"
            fi
        else
            NEW_REMOTE_URL="$1"
            echo_blue "===== Setting 'origin' remote URL to: $NEW_REMOTE_URL ====="
            display_and_run git remote set-url origin "$NEW_REMOTE_URL"

            if [ $? -eq 0 ]; then
                echo_green "‚úÖ Successfully updated 'origin' remote URL."
                echo_blue "Verify with: git remote -v"
            else
                echo_red "‚ùå Error: Failed to set 'origin' remote URL."
                echo_blue "Check the URL format and ensure you are in a Git repository."
            fi
            echo_blue "========================================================="
        fi
        ;;

    t)
        echo_blue "Git Troubleshooting Help:"
        echo "  - Merge conflict: After 'git pull' or 'git merge', 'git status' will show conflicted files."
        echo "    Edit them to resolve conflicts, then 'git add <file>' and 'git commit'."
        echo "  - Undo last commit (keep changes): g rs HEAD~1"
        echo "  - Undo last commit (DISCARD changes from commit & working dir): g rh HEAD~1"
        echo "  - Forcefully reset to a specific commit (DISCARD all changes since): g rh <commit-hash>"
        echo "  - Detached HEAD: Usually means you checked out a commit directly. 'g ch <branchname>' to fix."
        echo "  - Push rejected (non-fast-forward): Usually means remote has changes you don't."
        echo "    Try 'g pl' (pull first), resolve any merges, then 'g ps'."
        echo "  - Delete a local branch: git branch -d <branchname> (or -D for unmerged)"
        echo "  - Delete a remote branch: git push origin --delete <branchname>"
        echo
        ;;

    *) # This case should ideally not be reached due to the one at the top,
       # but as a fallback.
        echo_red "‚ùå Invalid option '$option' after initial processing. Use 'g' for help."
        exit 1
        ;;
esac
