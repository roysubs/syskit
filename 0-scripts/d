#!/usr/bin/env bash
# Author: Roy Wiseman 2025-01

# d - Directory size summary with relative sizes and optional file/dir counts

set -euo pipefail
shopt -s nullglob dotglob

CMD="bc"
if ! command -v $CMD &>/dev/null; then
    read -p "$CMD not found. Install (y/N)? " -n 1 -r REPLY && echo
    [[ $REPLY =~ ^[Yy]$ ]] && (sudo apt install -y $CMD) || { echo "$CMD not installed. Exiting."; exit 1; }
fi

# --- Configuration ---
# Default mode: apparent size (file data bytes)
DU_FLAGS=(--apparent-size -s -B1)
SIZE_MODE_DESC="apparent size (file data bytes)"

SHOW_COUNTS=false
SHOW_HELP=false
START_TIME=$(date +%s)
SUDO=""
SORT_BY_NAME=false
TOP_N=0
DIR="."

# --- Option Parsing ---
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help) SHOW_HELP=true ;;
        -c|--count) SHOW_COUNTS=true ;;
        -d|--disk-usage)
            DU_FLAGS=(-s -B1)
            SIZE_MODE_DESC="actual disk usage (allocated disk blocks)"
            ;;
        -b|--basic) shopt -u dotglob ;; # Exclude hidden files and directories
        -n|--name) SORT_BY_NAME=true ;;
        -s|--sudo) SUDO="sudo" ;;
        --top)
            shift
            [[ "$1" =~ ^[0-9]+$ ]] || { echo "Invalid -top argument: $1"; exit 1; }
            TOP_N="$1"
            ;;
        -*)
            echo "Unknown option: $1"
            exit 1
            ;;
        *) DIR="$1" ;;
    esac
    shift
done

DIR=$(eval echo "$DIR") # Expand potential ~ character

# --- Help Display ---
if $SHOW_HELP; then
    cat << EOF
Usage: $(basename "$0") [OPTIONS] [DIRECTORY]

Calculates and displays sizes of subdirectories and loose files within a directory.

Default calculation shows apparent size (sum of file data bytes).

Options:
  -h, --help        Show this help message and exit.
  -c, --count       Show file and directory counts for each subdirectory.
  -d, --disk-usage  Use actual disk usage (allocated blocks) instead of apparent file sizes.
  -b, --basic       Ignore hidden files/directories (names starting with '.').
                    By default, hidden items are included.
  -n, --name        Sort output by name instead of size (default is size descending).
  -s, --sudo        Use sudo for 'du' and 'find' commands (needed for restricted directories).
  --top N           Show only the top N largest directories (plus loose files).

Default directory is the current directory ('.').
EOF
    exit 0
fi

echo "Calculating directory sizes in: $(realpath "$DIR")"
echo "(using ${SIZE_MODE_DESC})"

# Initialize associative arrays
declare -A SIZES=()     # Associative array for directory sizes
declare -A NUM_FILES=() # Associative array for file counts (if -c)
declare -A NUM_DIRS=()  # Associative array for directory counts (if -c)
TOTAL_SIZE=0            # Running total size (subdirs + loose files)
LOOSE_TOTAL=0           # Running total size for loose files only
LOOSE_FILE_COUNT=0      # Count of loose files (for -c option)

# --- Collect Subdirectory Sizes ---
# Iterate through items in the target directory ending with '/' (directories)
for d in "$DIR"/*/; do
    # Skip if not a valid directory path
    [[ -d "$d" && ! -L "$d" ]] || continue

    # Check if stat command works on this directory
    if ! stat_output=$(stat -c %d "$d" 2>/dev/null); then
        echo "  Skipped '$d' (cannot stat)"
        continue
    fi

    # Only do mount point check if stat was successful
    if [[ "$stat_output" != "$(stat -c %d "$DIR" 2>/dev/null)" ]]; then
        echo "  Skipped '$d' (mount point)"
        continue
    fi

    name=$(basename "$d")
    if ! size=$($SUDO du "${DU_FLAGS[@]}" "$d" 2>/dev/null | cut -f1); then
        echo "  Skipped '$d' (du failed)"
        continue
    fi

    if [[ ! "$size" =~ ^[0-9]+$ ]]; then
        echo "  Skipped '$d' (size invalid)"
        continue
    fi

    SIZES["$name"]=$size
    (( TOTAL_SIZE += size ))

    if $SHOW_COUNTS; then
        files=$($SUDO find "$d" -type f 2>/dev/null | wc -l) || files=0
        dirs=$($SUDO find "$d" -type d 2>/dev/null | wc -l) || dirs=1
        NUM_FILES["$name"]=$files
        NUM_DIRS["$name"]=$((dirs - 1))
    fi
done

# --- Count and Collect Loose File Sizes ---
if [[ -d "$DIR" ]]; then
    # Create a temporary array to store found files
    mapfile -d $'\0' loose_files < <($SUDO find "$DIR" -mindepth 1 -maxdepth 1 -type f -print0 2>/dev/null || echo)
    
    # Count loose files if showing counts
    if $SHOW_COUNTS; then
        LOOSE_FILE_COUNT=${#loose_files[@]}
    fi
    
    # Calculate the size of each loose file
    for file in "${loose_files[@]}"; do
        [[ -n "$file" ]] || continue
        
        if size=$($SUDO du "${DU_FLAGS[@]}" "$file" 2>/dev/null | cut -f1); then
            if [[ "$size" =~ ^[0-9]+$ ]]; then
                (( LOOSE_TOTAL += size ))
            fi
        fi
    done
fi

# Add loose file total to the grand total
(( TOTAL_SIZE += LOOSE_TOTAL ))

# --- Helper Function: Format Bytes to Human Readable ---
to_human() {
    local size=$1 B K M G T P
    if (( size == 0 )); then printf "0 B"; return; fi # Handle zero separately
    B=1 K=1024 M=$((1024*1024)) G=$((1024*1024*1024)) T=$((1024*1024*1024*1024)) P=$((1024*1024*1024*1024*1024))
    # Compare size against thresholds and format accordingly
    if (( size < K )); then printf "%d B" "$size"
    elif (( size < M )); then printf "%.1f KB" "$(bc <<< "scale=1; $size/$K")"
    elif (( size < G )); then printf "%.1f MB" "$(bc <<< "scale=1; $size/$M")"
    elif (( size < T )); then printf "%.1f GB" "$(bc <<< "scale=1; $size/$G")"
    elif (( size < P )); then printf "%.1f TB" "$(bc <<< "scale=1; $size/$T")"
    else                      printf "%.1f PB" "$(bc <<< "scale=1; $size/$P")" # Future proofing!
    fi
}

# --- Output Formatting Setup ---
cols=$(tput cols || echo 80)  # Get terminal width, default 80
name_pad=25                  # Width for the name column
size_pad=10                  # Width for the size column
extra_pad=0                  # Extra padding if counts are shown
$SHOW_COUNTS && extra_pad=22 # Adjust padding for file/dir counts
# Calculate remaining space for the bar, ensure minimum width
bar_space=$(( cols - name_pad - size_pad - extra_pad - 5 )) # Adjusted spacing
(( bar_space < 10 )) && bar_space=10

# Only display output if we have data to show
if [[ ${#SIZES[@]} -gt 0 || $LOOSE_TOTAL -gt 0 ]]; then
    # --- Print Header ---
    if $SHOW_COUNTS; then
        # Header with Name, Size, NumFiles, NumDirs, Bar
        printf "\n%-*s %*s  %10s %10s  %s\n" "$name_pad" "Directory/Item" "$size_pad" "Size" "NumFiles" "NumDirs" "Size Bar"
        printf "%-*s %*s  %10s %10s  %s\n" "$name_pad" "-------------------------" "$size_pad" "----------" "----------" "----------" "--------------------"
    else
        # Header with Name, Size, Bar
        printf "\n%-*s %*s  %s\n" "$name_pad" "Directory/Item" "$size_pad" "Size" "Size Bar"
        printf "%-*s %*s  %s\n" "$name_pad" "-------------------------" "$size_pad" "----------" "--------------------"
    fi

    # --- Sorting ---
    declare -a sorted_names=() # Array to hold sorted directory names
    if [[ ${#SIZES[@]} -gt 0 ]]; then  # Only try to sort if we have entries
        if $SORT_BY_NAME; then
            # Sort keys (directory names) alphabetically
            mapfile -t sorted_names < <(printf "%s\n" "${!SIZES[@]}" | sort)
        else
            # Sort by size (descending)
            # Print "name size", sort numerically on 2nd field (-k2 -nr), print only 1st field (name)
            declare -a temp_sorted_names=()
            while read -r name size; do
                temp_sorted_names+=("$name")
            done < <(
                 for k in "${!SIZES[@]}"; do
                     # Use printf for safer handling of names potentially starting with '-'
                     printf "%s %s\n" "$k" "${SIZES[$k]}"
                 done | sort -k2 -nr
            )
            sorted_names=("${temp_sorted_names[@]}")
        fi
    fi

    # --- Apply -top N Filter ---
    if (( TOP_N > 0 && ${#sorted_names[@]} > TOP_N )); then
        # Slice the array to keep only the top N elements
        sorted_names=("${sorted_names[@]:0:TOP_N}")
    fi

    # --- Output Directory Details ---
    for name in "${sorted_names[@]}"; do
        # Skip if the key somehow doesn't exist (safety)
        [[ -v SIZES["$name"] ]] || continue

        size="${SIZES[$name]}"
        # Calculate bar length proportional to total size (avoid division by zero)
        barlen=0
        (( TOTAL_SIZE > 0 )) && barlen=$(( size * bar_space / TOTAL_SIZE ))
        # Create the bar string using printf and tr
        bar=$(printf "%-${barlen}s" "o" | tr ' ' 'o')
        # Format size to human-readable
        hsize=$(to_human "$size")

        # Print formatted line based on whether counts are shown
        if $SHOW_COUNTS; then
            printf "%-*s %*s  %10s %10s  [%s]\n" \
                "$name_pad" "$name" \
                "$size_pad" "$hsize" \
                "${NUM_FILES[$name]:-0}" "${NUM_DIRS[$name]:-0}" \
                "$bar"
        else
            printf "%-*s %*s  [%s]\n" \
                "$name_pad" "$name" \
                "$size_pad" "$hsize" \
                "$bar"
        fi
    done

    # --- Print Loose Files Summary ---
    if (( LOOSE_TOTAL > 0 || $SHOW_COUNTS || ${#sorted_names[@]} > 0 )); then # Only print if there's something to show
        hsize=$(to_human "$LOOSE_TOTAL")
        barlen=0
         (( TOTAL_SIZE > 0 )) && barlen=$(( LOOSE_TOTAL * bar_space / TOTAL_SIZE ))
        bar=$(printf "%-${barlen}s" "o" | tr ' ' 'o')

        if $SHOW_COUNTS; then
             printf "%-*s %*s  %10s %10s  [%s]\n" "$name_pad" "** Loose Files:" "$size_pad" "$hsize" "$LOOSE_FILE_COUNT" "-" "$bar"
        else
             printf "%-*s %*s  [%s]\n" "$name_pad" "** Loose Files:" "$size_pad" "$hsize" "$bar"
        fi
    fi

    # --- Print Total Size Summary ---
    printf "%-*s %*s\n" "$name_pad" "-------------------------" "$size_pad" "----------"
    printf "%-*s %*s\n" "$name_pad" "** Total Size:" "$size_pad" "$(to_human "$TOTAL_SIZE")"
else
    echo "No directories or files found or accessible to analyze."
fi

# --- Print Execution Time ---
END_TIME=$(date +%s)
RUN_TIME=$(( END_TIME - START_TIME ))
# Only show runtime if it's significant (e.g., > 5 seconds)
if (( RUN_TIME > 5 )); then
    echo "" # Add a blank line before runtime
    echo "Script execution time: ${RUN_TIME} seconds"
fi
