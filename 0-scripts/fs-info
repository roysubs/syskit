#!/bin/bash
# Author: Roy Wiseman 2025-01

# fs-info.sh
# Displays a comprehensive overview of filesystem, mount, disk health, and share information.
# Designed to be run as a regular user, but some commands (lsblk, df, smartctl, showmount)
# may show more complete information or require sudo for full functionality.

# --- Color Definitions ---
CYAN='\033[0;36m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
ORANGE='\033[0;33m' # For commands
RED='\033[0;31m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# --- Helper: Check if command is available (basic check for non-sudo commands) ---
ensure_command_available() {
    local cmd="$1"
    local pkg="$2"
    if ! command -v "$cmd" >/dev/null; then
        echo -e "${YELLOW}Command '$cmd' not found. Package '$pkg' might be needed.${NC}"
        return 1
    fi
    return 0
}


# --- Function to display lsblk information (cleaned up) ---
display_lsblk_info() {
    echo -e "${CYAN}${BOLD}--- Block Device Information (lsblk) ---${NC}"
    echo -e "${CYAN}${BOLD}----------------------------------------${NC}"
    if ensure_command_available "lsblk" "util-linux"; then
        echo -e "${ORANGE}Command: lsblk -e 7 -o NAME,SIZE,FSTYPE,TYPE,MOUNTPOINTS,LABEL,UUID,MODEL${NC}"
        echo -e "${YELLOW}Excluding (-e) 1=ramdisk, 7=loop, 11=sr, 253=device-mapper. Run with sudo for potentially more details.${NC}"
        lsblk -o NAME,SIZE,FSTYPE,TYPE,MOUNTPOINTS,LABEL,UUID,MODEL -e 1,7,11,253
    fi
    echo ""
    echo ""
}

# --- Function to display df information (cleaned up) ---
display_df_info() {
    echo -e "${CYAN}${BOLD}--- Filesystem Disk Space Usage (df) ---${NC}"
    echo -e "${CYAN}${BOLD}----------------------------------------${NC}"
    if ensure_command_available "df" "coreutils"; then
        echo -e "${ORANGE}Command: df -hT -x tmpfs -x devtmpfs -x squashfs -x overlay -x fuse.lxcfs${NC}"
        echo -e "${YELLOW}Excluding tmpfs, devtmpfs, squashfs, overlay, fuse.lxcfs. Run with sudo for potentially more details.${NC}"
        df -hT -x tmpfs -x devtmpfs -x squashfs -x overlay -x fuse.lxcfs
    fi
    echo ""
    echo ""
}

# --- Function to display fstab information ---
display_fstab_info() {
    local FSTAB_FILE="/etc/fstab"
    echo -e "${CYAN}${BOLD}--- /etc/fstab Content ---${NC}"
    echo -e "${CYAN}${BOLD}--------------------------${NC}"
    if [ ! -f "$FSTAB_FILE" ]; then echo -e "${RED}$FSTAB_FILE not found.${NC}\n"; return; fi
    echo -e "${ORANGE}Source: $FSTAB_FILE (filtered and formatted)${NC}"
    
    echo -e "${YELLOW}--- $FSTAB_FILE Entries ---${NC}"
    {
        echo -e "Filesystem\tMount_Point\tType\tOptions\tDump\tPass"
        echo -e "----------\t-----------\t----\t-------\t----\t----"
        grep -vE '^[[:space:]]*#|^[[:space:]]*$' "$FSTAB_FILE" | \
        awk '
        NF >= 3 { 
            filesystem = $1; mount_point = $2; type = $3;
            options_str = "defaults"; dump_str = "0"; pass_str = "0";      
            if (NF >= 6) {
                if ($NF ~ /^[0-9]+$/) { pass_str = $NF; } 
                if ($(NF-1) ~ /^[0-9]+$/) { dump_str = $(NF-1); }
                current_options_temp = "";
                options_end_idx = NF - 2;
                if (!($NF ~ /^[0-9]+$/)) { options_end_idx = NF; pass_str = "0"; } 
                if (!($(NF-1) ~ /^[0-9]+$/) && ($NF ~ /^[0-9]+$/) ) { options_end_idx = NF - 1; dump_str = "0"; }
                else if (!($(NF-1) ~ /^[0-9]+$/) && !($NF ~ /^[0-9]+$/)) { options_end_idx = NF; dump_str="0"; pass_str="0"; }
                if (options_end_idx >= 4) {
                    for (i = 4; i <= options_end_idx; i++) {
                        current_options_temp = current_options_temp (current_options_temp == "" ? "" : " ") $i;
                    }
                }
                if (current_options_temp != "") { options_str = current_options_temp; } 
                else if (options_end_idx < 4) { options_str = "defaults"; }
            } else if (NF == 5) { 
                options_str = $4;
                if ($5 ~ /^[0-9]+$/) { dump_str = $5; } 
                else { options_str = $4 " " $5; dump_str = "0"; }
                pass_str = "0"; 
            } else if (NF == 4) { options_str = $4; } 
            if (!(dump_str ~ /^[0-9]+$/)) dump_str="0"; if (!(pass_str ~ /^[0-9]+$/)) pass_str="0";
            printf "%s\t%s\t%s\t%s\t%s\t%s\n", filesystem, mount_point, type, options_str, dump_str, pass_str;
        }'
    } | column -t -s $'\t'
    echo -e "${YELLOW}Warning: Errors in ${FSTAB_FILE} can prevent system boot; edit with caution.${NC}"
    echo -e "${GREEN}fstab Fields Explanation:${NC}"
    echo -e "  ${BOLD}1. Filesystem:${NC} Device, UUID, LABEL, or remote fs."
    echo -e "  ${BOLD}2. Mount Point:${NC} Directory where attached."
    echo -e "  ${BOLD}3. Type:${NC} Filesystem type."
    echo -e "  ${BOLD}4. Options:${NC} Mount options."
    echo -e "  ${BOLD}5. Dump:${NC} 'dump' utility use (usually 0)."
    echo -e "  ${BOLD}6. Pass:${NC} 'fsck' order (0=no check, 1=root, 2=other)."
    echo ""
    echo ""
}

# --- Function to display SMART Disk Health ---
display_smart_health() {
    echo -e "${CYAN}${BOLD}--- SMART Disk Health Status ---${NC}"
    echo -e "${CYAN}${BOLD}--------------------------------${NC}"
    # Check if smartctl is accessible via sudo, as it often requires root.
    if ! sudo smartctl --version >/dev/null 2>&1; then
        echo -e "${YELLOW}Command 'smartctl' not found or not accessible via sudo.${NC}"
        echo -e "${YELLOW}Please install 'smartmontools' and ensure sudo allows smartctl execution.${NC}"
        echo ""
        return
    fi

    local disk_devices
    disk_devices=$(lsblk -d -n -o NAME,TYPE | awk '$2=="disk" {print "/dev/"$1}')

    if [ -z "$disk_devices" ]; then
        echo "No physical disk devices found to check."
        echo ""
        return
    fi

    echo -e "${ORANGE}Commands: sudo smartctl -H <disk> / sudo smartctl -A <disk> (for each disk below)${NC}"
    echo -e "${YELLOW}Fetching SMART health. This requires sudo privileges for each disk.${NC}"

    # Group header and data for column -t
    {
        # Headers with tab delimiters
        echo -e "Device\tOverall Health\tRealloc'd\tPending\tUncorrect"
        echo -e "-------\t--------------\t---------\t-------\t---------"

        for disk in $disk_devices; do
            local health_output
            local health_exit_code
            
            local health_status_raw="N/A"
            local health_status_colored="${YELLOW}N/A${NC}"
            local reallocated_sectors_raw="-"
            local reallocated_sectors_colored="-"
            local pending_sectors_raw="-"
            local pending_sectors_colored="-"
            local uncorrectable_sectors_raw="-"
            local uncorrectable_sectors_colored="-"

            # Run smartctl -H and capture its output and exit status
            health_output=$(sudo smartctl -H "$disk" 2>&1)
            health_exit_code=$?

            if [ "$health_exit_code" -eq 0 ] || [ "$health_exit_code" -eq 2 ]; then
                # Exit code 0 means PASSED, exit code 2 means FAILED.
                # In both cases, SMART data was successfully read.
                health_status_raw=$(echo "$health_output" | grep -iE '^(SMART overall-health self-assessment test result|self-assessment test result|SMART Health Status)' | awk -F': ' '{print $2}' | sed 's/\s*$//' | sed 's/self-assessment test result //')
                [[ -z "$health_status_raw" ]] && health_status_raw="Unknown (code $health_exit_code)" # Fallback if grep fails

                if [[ "$health_status_raw" =~ PASSED|OK|COMPLETED ]]; then
                    health_status_colored="${GREEN}${health_status_raw}${NC}"
                elif [[ "$health_status_raw" =~ FAILED|FAILING_NOW ]]; then
                    health_status_colored="${RED}${health_status_raw}${NC}"
                else # Could be "Unknown" or other status strings parsed
                    health_status_colored="${YELLOW}${health_status_raw}${NC}"
                fi

                # Attempt to get attributes only if -H was somewhat successful in communicating
                # Suppress errors from -A in case attributes are not available or parsing fails
                reallocated_sectors_raw=$(sudo smartctl -A "$disk" 2>/dev/null | awk '$1=="5" && $2=="Reallocated_Sector_Ct" {print $NF}')
                [ -z "$reallocated_sectors_raw" ] && reallocated_sectors_raw="-"
                if [[ "$reallocated_sectors_raw" != "0" && "$reallocated_sectors_raw" != "-" ]]; then 
                    reallocated_sectors_colored="${RED}${reallocated_sectors_raw}${NC}"; 
                else
                    reallocated_sectors_colored="$reallocated_sectors_raw";
                fi

                pending_sectors_raw=$(sudo smartctl -A "$disk" 2>/dev/null | awk '$1=="197" && $2=="Current_Pending_Sector" {print $NF}')
                [ -z "$pending_sectors_raw" ] && pending_sectors_raw="-"
                if [[ "$pending_sectors_raw" != "0" && "$pending_sectors_raw" != "-" ]]; then 
                    pending_sectors_colored="${RED}${pending_sectors_raw}${NC}"; 
                else
                    pending_sectors_colored="$pending_sectors_raw";
                fi
                
                uncorrectable_sectors_raw=$(sudo smartctl -A "$disk" 2>/dev/null | awk '$1=="198" && ($2=="Offline_Uncorrectable" || $2=="Reported_Uncorrect") {print $NF}')
                [ -z "$uncorrectable_sectors_raw" ] && uncorrectable_sectors_raw="-"
                if [[ "$uncorrectable_sectors_raw" != "0" && "$uncorrectable_sectors_raw" != "-" ]]; then 
                    uncorrectable_sectors_colored="${RED}${uncorrectable_sectors_raw}${NC}"; 
                else
                    uncorrectable_sectors_colored="$uncorrectable_sectors_raw";
                fi
            else
                # smartctl -H failed with an exit code other than 0 or 2
                # This indicates a problem accessing SMART data itself (e.g., device doesn't support SMART, permissions issue).
                health_status_colored="${YELLOW}No SMART Access (err $health_exit_code)${NC}"
                # Attributes remain N/A as initialized
                reallocated_sectors_colored="N/A" 
                pending_sectors_colored="N/A"
                uncorrectable_sectors_colored="N/A"
            fi
            # Use echo -e with tabs for column -t. 
            # Variables already contain color codes, echo -e will interpret \t.
            echo -e "${disk}\t${health_status_colored}\t${reallocated_sectors_colored}\t${pending_sectors_colored}\t${uncorrectable_sectors_colored}"
        done
    } | column -t -s $'\t' # Pipe the whole block (headers and data) to column
    echo ""
    echo ""
}

# --- Function to display Samba shares ---
display_samba_shares() {
    echo -e "${CYAN}${BOLD}--- Samba Share Configuration ---${NC}"
    echo -e "${CYAN}${BOLD}---------------------------------${NC}"
    if ! ensure_command_available "testparm" "samba or samba-common-bin"; then echo ""; return; fi
    echo -e "${ORANGE}Source: testparm -s (parsed)${NC}"

    # Use a simpler approach with sed and grep instead of complex AWK
    local testparm_output
    testparm_output=$(testparm -s 2>/dev/null)

    if [ -z "$testparm_output" ]; then
        echo "No Samba configuration found or testparm failed."
        echo ""
        echo ""
        return
    fi

    # Extract share sections (exclude global and printers)
    local shares
    shares=$(echo "$testparm_output" | grep -E '^\[' | grep -v -E '^\[(global|printers)\]' | sed 's/^\[//; s/\]$//')

    if [ -z "$shares" ]; then
        echo "No user-defined Samba shares found (excluding [global] and [printers])."
        echo ""
        echo ""
        return
    fi

    # Print header
    printf "%-15s %-25s %-10s %-15s %-10s %-10s %-20s\n" \
        "Name" "Path" "Read-Only" "ValidUsers" "CreateMask" "DirMask" "Comment"
    printf "%-15s %-25s %-10s %-15s %-10s %-10s %-20s\n" \
        "===============" "=========================" "==========" "===============" "==========" "==========" "===================="

    # Process each share
    while IFS= read -r share_name; do
        if [ -n "$share_name" ]; then
            # Extract configuration for this share
            local share_config
            share_config=$(echo "$testparm_output" | sed -n "/^\[$share_name\]/,/^\[/p" | head -n -1)

            # Extract individual settings
            local path=$(echo "$share_config" | grep -E '^[[:space:]]*path[[:space:]]*=' | sed 's/^[[:space:]]*path[[:space:]]*=[[:space:]]*//' | tr -d '\r')
            local readonly=$(echo "$share_config" | grep -E '^[[:space:]]*read only[[:space:]]*=' | sed 's/^[[:space:]]*read only[[:space:]]*=[[:space:]]*//' | tr -d '\r')
            local validusers=$(echo "$share_config" | grep -E '^[[:space:]]*valid users[[:space:]]*=' | sed 's/^[[:space:]]*valid users[[:space:]]*=[[:space:]]*//' | tr -d '\r')
            local createmask=$(echo "$share_config" | grep -E '^[[:space:]]*create mask[[:space:]]*=' | sed 's/^[[:space:]]*create mask[[:space:]]*=[[:space:]]*//' | tr -d '\r')
            local dirmask=$(echo "$share_config" | grep -E '^[[:space:]]*directory mask[[:space:]]*=' | sed 's/^[[:space:]]*directory mask[[:space:]]*=[[:space:]]*//' | tr -d '\r')
            local comment=$(echo "$share_config" | grep -E '^[[:space:]]*comment[[:space:]]*=' | sed 's/^[[:space:]]*comment[[:space:]]*=[[:space:]]*//' | tr -d '\r')

            # Set defaults for empty values
            [ -z "$path" ] && path="n/a"
            [ -z "$readonly" ] && readonly="n/a"
            [ -z "$validusers" ] && validusers="n/a"
            [ -z "$createmask" ] && createmask="n/a"
            [ -z "$dirmask" ] && dirmask="n/a"
            [ -z "$comment" ] && comment="n/a"

            # Print the share information
            printf "%-15s %-25s %-10s %-15s %-10s %-10s %-20s\n" \
                "$share_name" "$path" "$readonly" "$validusers" "$createmask" "$dirmask" "$comment"
        fi
    done <<< "$shares"

    echo ""
    echo ""
}
    # testparm -s 2>&1 | awk '
    # BEGIN {
    #     current_share = ""; share_count = 0;
    #     headers[0] = "Name"; headers[1] = "Path"; headers[2] = "Read-Only"; headers[3] = "ValidUsers";
    #     headers[4] = "CreateMask"; headers[5] = "DirMask"; headers[6] = "Comment";
    #     for (i = 0; i <= 6; i++) max_widths[i] = length(headers[i]);
    # }
    # {
    #     # Check for section headers like [sharename]
    #     if (match($0, /^\[[^]]+\]$/)) {
    #         if (current_share != "" && current_share != "global" && current_share != "printers") {
    #             share_order[share_count++] = current_share;
    #         }
    #         # Extract share name between brackets
    #         current_share = substr($0, 2, length($0) - 2);
    #         if (current_share != "" && current_share != "global" && current_share != "printers") {
    #             shares[current_share]["Path"] = "n/a"; 
    #             shares[current_share]["Read-Only"] = "n/a"; 
    #             shares[current_share]["ValidUsers"] = "n/a";
    #             shares[current_share]["CreateMask"] = "n/a"; 
    #             shares[current_share]["DirMask"] = "n/a"; 
    #             shares[current_share]["Comment"] = "n/a";
    #         }
    #     } else if (current_share != "" && current_share != "global" && current_share != "printers") {
    #         # Process configuration lines within a share section
    #         line = $0; 
    #         gsub(/^[ \t]+|[ \t]+$/, "", line);
    #         if (match(line, /^path[ \t]*=[ \t]*(.*)/, arr)) {
    #             shares[current_share]["Path"] = arr[1];
    #         } else if (match(line, /^read only[ \t]*=[ \t]*(Yes|No)/, arr)) {
    #             shares[current_share]["Read-Only"] = arr[1];
    #         } else if (match(line, /^valid users[ \t]*=[ \t]*(.*)/, arr)) {
    #             shares[current_share]["ValidUsers"] = arr[1];
    #         } else if (match(line, /^create mask[ \t]*=[ \t]*(.*)/, arr)) {
    #             shares[current_share]["CreateMask"] = arr[1];
    #         } else if (match(line, /^directory mask[ \t]*=[ \t]*(.*)/, arr)) {
    #             shares[current_share]["DirMask"] = arr[1];
    #         } else if (match(line, /^comment[ \t]*=[ \t]*(.*)/, arr)) {
    #             shares[current_share]["Comment"] = arr[1];
    #         }
    #     }
    # }
    # END {
    #     if (current_share != "" && current_share != "global" && current_share != "printers") {
    #         share_order[share_count++] = current_share;
    #     }
    #     if (share_count == 0) { 
    #         print "No user-defined Samba shares found (excluding [global] and [printers])."; 
    #         exit; 
    #     }
    #     
    #     # Calculate column widths
    #     for (idx = 0; idx < share_count; idx++) {
    #         sn = share_order[idx];
    #         if (length(sn) > max_widths[0]) max_widths[0] = length(sn);
    #         if (length(shares[sn]["Path"]) > max_widths[1]) max_widths[1] = length(shares[sn]["Path"]);
    #         if (length(shares[sn]["Read-Only"]) > max_widths[2]) max_widths[2] = length(shares[sn]["Read-Only"]);
    #         if (length(shares[sn]["ValidUsers"]) > max_widths[3]) max_widths[3] = length(shares[sn]["ValidUsers"]);
    #         if (length(shares[sn]["CreateMask"]) > max_widths[4]) max_widths[4] = length(shares[sn]["CreateMask"]);
    #         if (length(shares[sn]["DirMask"]) > max_widths[5]) max_widths[5] = length(shares[sn]["DirMask"]);
    #         if (length(shares[sn]["Comment"]) > max_widths[6]) max_widths[6] = length(shares[sn]["Comment"]);
    #     }
    #     
    #     # Create format string
    #     fmt_str = ""; sep_str = "";
    #     for (col = 0; col <= 6; col++) {
    #         fmt_str = fmt_str "%-" max_widths[col] "s" (col < 6 ? "\t" : "\n");
    #         for (j = 0; j < max_widths[col]; j++) sep_str = sep_str "=";
    #         if (col < 6) sep_str = sep_str "\t";
    #     }
    #     
    #     # Print headers and data
    #     printf fmt_str, headers[0], headers[1], headers[2], headers[3], headers[4], headers[5], headers[6]; 
    #     print sep_str;
    #     for (idx = 0; idx < share_count; idx++) {
    #         sn = share_order[idx];
    #         printf fmt_str, sn, shares[sn]["Path"], shares[sn]["Read-Only"], shares[sn]["ValidUsers"], \
    #                shares[sn]["CreateMask"], shares[sn]["DirMask"], shares[sn]["Comment"];
    #     }
    # }' | column -t -s $'\t'

# --- Function to display NFS exports (Server Perspective) ---
display_nfs_exports_server() {
    local EXPORTS_FILE="/etc/exports"
    echo -e "${CYAN}${BOLD}--- NFS Server Export Configuration ---${NC}"
    echo -e "${CYAN}${BOLD}---------------------------------------${NC}"

    local nfs_server_service="nfs-kernel-server" 
    if ! systemctl list-units --type=service --all 2>/dev/null | grep -q "${nfs_server_service}.service"; then
        nfs_server_service="nfs-server" 
    fi
    
    local is_active=false
    if systemctl is-active --quiet "$nfs_server_service" 2>/dev/null; then
        is_active=true
    fi

    echo -e "${ORANGE}Source: $EXPORTS_FILE (filtered)${NC}"
    if [ ! -f "$EXPORTS_FILE" ]; then
        echo -e "${YELLOW}$EXPORTS_FILE not found. NFS server may not be configured to export filesystems.${NC}"
    elif [ ! -s "$EXPORTS_FILE" ] || ! grep -qE '^[^#]' "$EXPORTS_FILE"; then
         echo "No active exports found in $EXPORTS_FILE (file is empty or all lines are comments)."
    else
        {
            echo -e "Path\tClients_and_Options"
            echo -e "----\t-------------------"
            grep -vE '^[[:space:]]*#|^[[:space:]]*$' "$EXPORTS_FILE" | awk '
            NF >= 1 { # Must have at least a path
                path = $1;
                clients_options = "";
                if (NF >= 2) {
                    for (i = 2; i <= NF; i++) {
                        clients_options = clients_options (clients_options == "" ? "" : " ") $i;
                    }
                } else {
                    clients_options = "(No clients/options specified)";
                }
                printf "%s\t%s\n", path, clients_options;
            }'
        } | column -t -s $'\t'
    fi

    # Check for showmount availability using sudo
    if sudo showmount --version >/dev/null 2>&1; then
        echo -e "\n${YELLOW}Active NFS Exports (sudo showmount -e localhost):${NC}"
        echo -e "${ORANGE}Command: sudo showmount -e localhost${NC}"
        if sudo showmount -e localhost 2>/dev/null; then
            : 
        else
            echo "Could not retrieve active exports. NFS server might not be running or exporting."
        fi
        
        echo -e "\n${YELLOW}Active NFS Client Connections (sudo showmount -a localhost):${NC}"
        echo -e "${ORANGE}Command: sudo showmount -a localhost${NC}"
        if sudo showmount -a localhost 2>/dev/null; then
            : 
        else
            echo "No active client connections, or NFS server not responding."
        fi
    else
        echo -e "\n${YELLOW}'showmount' command not found or not accessible via sudo.${NC}"
        echo -e "${YELLOW}Install nfs-common (or similar package) and ensure sudo access to use 'showmount'.${NC}"
    fi
    
    echo -e "\n${YELLOW}NFS Server Service Status Summary (${nfs_server_service}):${NC}"
    echo -e "${ORANGE}Command: systemctl status $nfs_server_service --no-pager | grep -E 'Active:|Loaded:|Main PID:'${NC}"
    if $is_active; then
        systemctl status "$nfs_server_service" --no-pager | grep -E 'Active:|Loaded:|Main PID:' | sed 's/^[[:space:]]*//'
    else
        echo -e "${RED}Service $nfs_server_service is not active.${NC}"
    fi
    echo ""
    echo ""
}

# --- Function to display Remote Mounted Filesystems (Client Perspective) ---
display_remote_mounts() {
    echo -e "${CYAN}${BOLD}--- Remote Mounted Filesystems (This System as Client) ---${NC}"
    echo -e "${CYAN}${BOLD}----------------------------------------------------------${NC}"
    local found_any_remote_mount=false

    echo -e "${ORANGE}Source: mount -l -t cifs / mount -l -t nfs,nfs4 (parsed)${NC}"
    if mount -l -t cifs 2>/dev/null | grep -q '^//'; then 
        echo -e "\n${YELLOW}Samba (SMB/CIFS) Client Mounts:${NC}"
        mount -l -t cifs | awk '{printf "%s\n  on: %s\n  options: %s\n\n", $1, $3, $6}'
        found_any_remote_mount=true
    fi

    if mount -l -t nfs,nfs4 2>/dev/null | grep -q ':'; then 
        echo -e "\n${YELLOW}NFS Client Mounts:${NC}"
        mount -l -t nfs,nfs4 | awk '{printf "%s\n  on: %s\n  options: %s\n\n", $1, $3, $6}'
        found_any_remote_mount=true
    fi
    
    if ! $found_any_remote_mount; then
        echo "No remote CIFS or NFS mounts found on this system."
    fi
    echo ""
    echo ""
}


# --- Main Script Execution ---
echo -e "${BOLD}====================================${NC}"
echo -e "${BOLD}      Filesystem Information        ${NC}"
echo -e "${BOLD}====================================${NC}"
echo ""

display_smart_health
display_samba_shares
display_nfs_exports_server
display_remote_mounts
display_fstab_info
display_lsblk_info
display_df_info

echo -e "${GREEN}${BOLD}Info gathering complete.${NC}"
echo ""

exit 0
